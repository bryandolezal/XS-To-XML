{
    "kbArmyGetIsIDValid": {
        "name": "kbArmyGetIsIDValid",
        "return_type": "bool",
        "params": [
            {
                "name": "armyID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Return whether the armyID is valid."
    },
    "kbArmyCreate": {
        "name": "kbArmyCreate",
        "return_type": "int",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "exclusiveUnits",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Creates a army with the given name."
    },
    "kbArmyDestroy": {
        "name": "kbArmyDestroy",
        "return_type": "void",
        "params": [
            {
                "name": "armyID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Destroys the given army."
    },
    "kbArmyGetNumber": {
        "name": "kbArmyGetNumber",
        "return_type": "int",
        "params": [],
        "desc": "Returns the number of armies."
    },
    "kbArmyGetIDByIndex": {
        "name": "kbArmyGetIDByIndex",
        "return_type": "int",
        "params": [
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the index-th army ID."
    },
    "kbArmyGetID": {
        "name": "kbArmyGetID",
        "return_type": "int",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the ID of the given army."
    },
    "kbArmyGetName": {
        "name": "kbArmyGetName",
        "return_type": "string",
        "params": [
            {
                "name": "armyID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the name of the given army."
    },
    "kbArmyGetNumberUnits": {
        "name": "kbArmyGetNumberUnits",
        "return_type": "int",
        "params": [
            {
                "name": "armyID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the number of units in the given army."
    },
    "kbArmyGetUnitID": {
        "name": "kbArmyGetUnitID",
        "return_type": "int",
        "params": [
            {
                "name": "armyID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the appropriate unitID from the given army."
    },
    "kbArmyAddUnit": {
        "name": "kbArmyAddUnit",
        "return_type": "void",
        "params": [
            {
                "name": "armyID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Adds the unitID to the given army."
    },
    "kbArmyRemoveUnit": {
        "name": "kbArmyRemoveUnit",
        "return_type": "void",
        "params": [
            {
                "name": "armyID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Removes the unitID from the given army."
    },
    "kbArmyRemoveUnitByIndex": {
        "name": "kbArmyRemoveUnitByIndex",
        "return_type": "void",
        "params": [
            {
                "name": "armyID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Removes the unitIndex-th unit from the given army."
    },
    "kbArmyRemoveUnits": {
        "name": "kbArmyRemoveUnits",
        "return_type": "void",
        "params": [
            {
                "name": "armyID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Removes all units from the given army."
    },
    "kbArmyGetCreationTime": {
        "name": "kbArmyGetCreationTime",
        "return_type": "int",
        "params": [
            {
                "name": "armyID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the creation time for the given army."
    },
    "kbArmyGetMembershipTime": {
        "name": "kbArmyGetMembershipTime",
        "return_type": "int",
        "params": [
            {
                "name": "armyID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the creation time for the given army."
    },
    "kbArmyGetLocation": {
        "name": "kbArmyGetLocation",
        "return_type": "vector",
        "params": [
            {
                "name": "armyID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the vector location for the given army."
    },
    "kbArmyGetNumberWithinLocation": {
        "name": "kbArmyGetNumberWithinLocation",
        "return_type": "int",
        "params": [
            {
                "name": "armyID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "location",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "range",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the number of units within range of the given point in the given army."
    },
    "kbArmyGetCurrentHitpoints": {
        "name": "kbArmyGetCurrentHitpoints",
        "return_type": "float",
        "params": [
            {
                "name": "armyID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the current total hitpoints for the given army."
    },
    "kbArmyGetMaximumHitpoints": {
        "name": "kbArmyGetMaximumHitpoints",
        "return_type": "float",
        "params": [
            {
                "name": "armyID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the maximum total hitpoints for the given army."
    },
    "kbArmyGetHealth": {
        "name": "kbArmyGetHealth",
        "return_type": "float",
        "params": [
            {
                "name": "armyID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the health for the given army."
    },
    "kbArmyGetNumberWithHealth": {
        "name": "kbArmyGetNumberWithHealth",
        "return_type": "int",
        "params": [
            {
                "name": "armyID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "minimumHealth",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the number of units with at least the minimum amount of health specified for the given army."
    },
    "kbArmyGetCurrentAICost": {
        "name": "kbArmyGetCurrentAICost",
        "return_type": "float",
        "params": [
            {
                "name": "armyID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the current AI cost (worth) for the given army."
    },
    "kbArmyGetMaximumAICost": {
        "name": "kbArmyGetMaximumAICost",
        "return_type": "float",
        "params": [
            {
                "name": "armyID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the maximum AI cost (worth) for the given army."
    },
    "kbPlayerGetPop": {
        "name": "kbPlayerGetPop",
        "return_type": "int",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the current population for the player, means cheating if used by AI for other players."
    },
    "kbPlayerGetPopCap": {
        "name": "kbPlayerGetPopCap",
        "return_type": "int",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the current population cap for the given player, means cheating if used by AI for other players."
    },
    "kbPlayerGetMaxPop": {
        "name": "kbPlayerGetMaxPop",
        "return_type": "int",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the maximum population for the given player."
    },
    "kbPlayerGetAge": {
        "name": "kbPlayerGetAge",
        "return_type": "int",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the current age for the given player."
    },
    "kbPlayerGetCulture": {
        "name": "kbPlayerGetCulture",
        "return_type": "int",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the culture for the given player."
    },
    "kbCultureGetName": {
        "name": "kbCultureGetName",
        "return_type": "string",
        "params": [
            {
                "name": "cultureID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the culture name for the given culture."
    },
    "kbPlayerGetCiv": {
        "name": "kbPlayerGetCiv",
        "return_type": "int",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the civilization (major god) for the given player."
    },
    "kbCivGetName": {
        "name": "kbCivGetName",
        "return_type": "string",
        "params": [
            {
                "name": "civID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the civilization (major god) name for the given civID."
    },
    "kbPlayerGetBuildingEfficiency": {
        "name": "kbPlayerGetBuildingEfficiency",
        "return_type": "float",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the building efficiency for the given player."
    },
    "kbPlayerIsResigned": {
        "name": "kbPlayerIsResigned",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the player's resigned status."
    },
    "kbPlayerHasLost": {
        "name": "kbPlayerHasLost",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if the player has either resigned or has been defeated."
    },
    "kbPlayerGetTeam": {
        "name": "kbPlayerGetTeam",
        "return_type": "int",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the player's team number."
    },
    "kbPlayerGetName": {
        "name": "kbPlayerGetName",
        "return_type": "string",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the player's name."
    },
    "kbPlayerIsEnemy": {
        "name": "kbPlayerIsEnemy",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if the given player is an enemy."
    },
    "kbPlayerIsNeutral": {
        "name": "kbPlayerIsNeutral",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if the given player is a neutral player."
    },
    "kbPlayerIsAlly": {
        "name": "kbPlayerIsAlly",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if the given player is an ally."
    },
    "kbPlayerIsMutualAlly": {
        "name": "kbPlayerIsMutualAlly",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if the given player is a mutual ally."
    },
    "kbGetNumberMutualAllies": {
        "name": "kbGetNumberMutualAllies",
        "return_type": "int",
        "params": [],
        "desc": "Returns the number of mutual allies."
    },
    "kbPlayerIsHuman": {
        "name": "kbPlayerIsHuman",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if the given player is a a human player."
    },
    "kbPlayerGetHandicap": {
        "name": "kbPlayerGetHandicap",
        "return_type": "float",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the player's handicap multiplier (ie., 1.0 = no handicap)."
    },
    "kbPlayerSetHandicap": {
        "name": "kbPlayerSetHandicap",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "fHandicap",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the indicated player's handicap multiplier (ie., 1.0 = no handicap)."
    },
    "kbPlayerGetStartingPosition": {
        "name": "kbPlayerGetStartingPosition",
        "return_type": "vector",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "gets the player starting position."
    },
    "kbUnitQueryCreate": {
        "name": "kbUnitQueryCreate",
        "return_type": "int",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Creates a unit query, returns the query ID."
    },
    "kbUnitQueryResetData": {
        "name": "kbUnitQueryResetData",
        "return_type": "void",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Resets the given unit query data AND results."
    },
    "kbUnitQueryResetResults": {
        "name": "kbUnitQueryResetResults",
        "return_type": "void",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Resets the given unit query results."
    },
    "kbUnitQueryDestroy": {
        "name": "kbUnitQueryDestroy",
        "return_type": "void",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Destroys the given unit query."
    },
    "kbUnitQueryNumberResults": {
        "name": "kbUnitQueryNumberResults",
        "return_type": "int",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the number of results in the current query."
    },
    "kbUnitQueryGetResult": {
        "name": "kbUnitQueryGetResult",
        "return_type": "int",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the UnitID of the index-th result in the current query."
    },
    "kbUnitQueryGetResults": {
        "name": "kbUnitQueryGetResults",
        "return_type": "int[]",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns all unit IDs in the current query."
    },
    "kbUnitQuerySetPlayerID": {
        "name": "kbUnitQuerySetPlayerID",
        "return_type": "void",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resetQueryData",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Query Data: Sets the player whose units we will search for. If you for example provide 3 in here, the query will only return units belonging to player 3. resetQueryData can be used to instantly completely reset a query when using this syscall, so use it BEFORE you set any other data. Use either this function or kbUnitQuerySetPlayerRelation, you must have either one of these two. Default value: -1 (finds no units)"
    },
    "kbUnitQuerySetPlayerRelation": {
        "name": "kbUnitQuerySetPlayerRelation",
        "return_type": "void",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "relation",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Query Data: Sets the player relation the query will search for. Valid inputs here are the relation constants which are prefixed by cPlayerRelation. If you for example provide cPlayerRelationEnemy in here the query will only find units that are your enemy. Use either this function or kbUnitQuerySetPlayerID, you must have either one of these two. Default value: invalid (finds no units)"
    },
    "kbUnitQuerySetUnitType": {
        "name": "kbUnitQuerySetUnitType",
        "return_type": "void",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitType",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Query Data: Set what units the query will search for. This can be all cUnitType constants. You MUST set this for every query, or it has no idea what to search for. Default value: -1 (finds no units)"
    },
    "kbUnitQuerySetActionType": {
        "name": "kbUnitQuerySetActionType",
        "return_type": "void",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "actionTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Query Data: Sets what action type the units must be performing to be picked up by the query. This can be all cActionType constants. If you call this on enemy units and don't have the cUnitQuerySeeableStateVisible state set then it will cheat!!! Default value: -1 (not filtered on actions)"
    },
    "kbUnitQuerySetState": {
        "name": "kbUnitQuerySetState",
        "return_type": "void",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitState",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Query Data: Sets what unit state the queries will search for. Valid inputs here are the unit state constants which are prefixed by cUnitState. If you for example provide cUnitStateAlive inhere the query will only find units that are alive. Default value: cUnitStateAny (be mindful here that this state will also find dead units)"
    },
    "kbUnitQuerySetPosition": {
        "name": "kbUnitQuerySetPosition",
        "return_type": "void",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "position",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Query Data: Sets from what position the query will start searching. You MUST combine this with kbUnitQuerySetMaximumDistance or it has no effect. Default value: cInvalidVector (not filtered by position)"
    },
    "kbUnitQuerySetMaximumDistance": {
        "name": "kbUnitQuerySetMaximumDistance",
        "return_type": "void",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "distance",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Query Data: Sets the maximum distance from the position the query will search, in a circular radius. You MUST combine this with kbUnitQuerySetPosition or it has no effect. Default value: -1.0 (no distance and thus entire map)"
    },
    "kbUnitQuerySetIgnoreKnockedOutUnits": {
        "name": "kbUnitQuerySetIgnoreKnockedOutUnits",
        "return_type": "void",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "value",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Query Data: Sets if the query will count knocked out units or not. If for example this is set to true then a knocked out Arkantos will not be picked up by the query. Default value: true."
    },
    "kbUnitQuerySetAscendingSort": {
        "name": "kbUnitQuerySetAscendingSort",
        "return_type": "void",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "value",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Query Data: Sets if the query results will be sorted from closest to furthest in relation to the position. You MUST combine this with kbUnitQuerySetPosition or it has no effect. Default value: false (randomly sorted)"
    },
    "kbUnitQuerySetBaseID": {
        "name": "kbUnitQuerySetBaseID",
        "return_type": "void",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Query Data: Sets what base the unit must be in to be valid for the query. Main use for this is with AI scripting where the AI bases can be analyzed. Default value: -1 (not filtered on bases)"
    },
    "kbUnitQuerySetAreaID": {
        "name": "kbUnitQuerySetAreaID",
        "return_type": "void",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "areaID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Query Data: Sets what areaID the unit must be in to be valid for the query. Default value: -1 (not filtered on areas)"
    },
    "kbUnitQuerySetAreaGroupID": {
        "name": "kbUnitQuerySetAreaGroupID",
        "return_type": "void",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "areaGroupID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Query Data: Sets what areaGroupID the unit must be in to be valid for the query. Default value: -1 (not filtered on areas groups)"
    },
    "kbUnitQuerySetArmyID": {
        "name": "kbUnitQuerySetArmyID",
        "return_type": "void",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "armyID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Query Data: Sets what armyID the unit must be in to be valid for the query. Default value: -1 (not filtered on armies)"
    },
    "kbUnitQuerySetMinCreationTime": {
        "name": "kbUnitQuerySetMinCreationTime",
        "return_type": "void",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "time",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "inclusive",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Query Data: Sets minimum creation time, in game time milisseconds, for unit to be considered valid for the query and whether or not the check for creation time should be inclusiveDefault value: -1 (not filtered by minimum creation time), true (check is inclusive)"
    },
    "kbUnitQuerySetMaxCreationTime": {
        "name": "kbUnitQuerySetMaxCreationTime",
        "return_type": "void",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "time",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "inclusive",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Query Data: Sets maximum creation time, in game time milisseconds, for unit to be considered valid for the query and whether or not the check for creation time should be inclusiveDefault value: -1 (not filtered by maximum creation time), true (check is inclusive)"
    },
    "kbUnitQuerySetVisibleState": {
        "name": "kbUnitQuerySetVisibleState",
        "return_type": "void",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "state",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Query Data: sets the state in relation to LOS for what units are considered valid for this queryID. A unit can have different visiblity states in the KB that you can uniquely search for. cUnitQuerySeeableStateAllValid: no filtering. cUnitQuerySeeableStateVisible: requires active LOS of the unit. cUnitQuerySeeableStateUnderFog: doppled units, like gold mines and buildings. cUnitQuerySeeableStateNotVisible: units that we once saw but are not visible to us anymore. cUnitQuerySeeableStateSeeable: combination of Visible and UnderFog, so both are valid. cUnitQueryVisibleStateRecentPositionKnown: excludes all units that we know no valid position off. cUnitQueryVisibleStateNoRecentPositionKnown: excludes all units that we have a valid position off."
    },
    "kbUnitQuerySetExcludeTypes": {
        "name": "kbUnitQuerySetExcludeTypes",
        "return_type": "void",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "types",
                "type": "int[]",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Query Data: if a unit is any of the types in the types array it will be skipped. This array accepts proto units as well as abstract types."
    },
    "kbUnitQueryExecute": {
        "name": "kbUnitQueryExecute",
        "return_type": "int",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Executes the query (using the query data) and returns the number of units found. ATTENTION: if you execute a query multiple times, without resetting the results, the results will stack on top of each other. You can't get duplicate results this way, but accidentally stacking results can lead to unexpected outcomes."
    },
    "kbUnitQueryExecuteOnQuery": {
        "name": "kbUnitQueryExecuteOnQuery",
        "return_type": "int",
        "params": [
            {
                "name": "currentQueryID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "previousQueryID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Executes the query (using the query data) on the other query and returns the number of units found. For example your previousQueryID searches for enemy units and finds 20 of them of which 5 are myth units. Then your currentQueryID looks only for myth units. If you now execute your currentQueryID on your previousQueryID you will get back the 5 myth units you originally found in your previousQueryID."
    },
    "kbUnitQueryGetUnitCost": {
        "name": "kbUnitQueryGetUnitCost",
        "return_type": "float",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "considerHealth",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the total aiCost of the found units, uses values set by kbSetAICostWeight to calculate multipliers. If considerHealth is true it will take the current hitpoints of the unit into account. For example if your Hoplite is half hp then only half the cost of the Hoplite is added to the total."
    },
    "kbUnitQueryGetUnitHitpoints": {
        "name": "kbUnitQueryGetUnitHitpoints",
        "return_type": "float",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "currentHitpoints",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the total maximum hitpoints of the found units. If considerHealth is true it will instead return the total of current hitpoints."
    },
    "kbUnitQueryGetPopulationSlots": {
        "name": "kbUnitQueryGetPopulationSlots",
        "return_type": "int",
        "params": [
            {
                "name": "queryID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the number of pop slots currently occupied by the results in the given query. If this is called on a query that uses a player relation instead of a playerID it will calculate using default population values."
    },
    "kbUnitGetIsIDValid": {
        "name": "kbUnitGetIsIDValid",
        "return_type": "bool",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "deadIsValid",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns if the unitID corresponds to a unit that is currently in the game. Dead units remain valid for some time after their death, which is why deadIsValid variable exists. If deadIsValid is false then dead units are considered not valid."
    },
    "kbUnitGetActionDamageForType": {
        "name": "kbUnitGetActionDamageForType",
        "return_type": "float",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "actionName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "damageTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "addBuffs",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns total damage stat for this unit action for this unit."
    },
    "kbUnitGetPlayerID": {
        "name": "kbUnitGetPlayerID",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the player ID for this unit ID."
    },
    "kbUnitGetPlanID": {
        "name": "kbUnitGetPlanID",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the plan ID for this unit ID."
    },
    "kbUnitGetBaseID": {
        "name": "kbUnitGetBaseID",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the base ID for this unit ID."
    },
    "kbUnitGetAreaID": {
        "name": "kbUnitGetAreaID",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the area ID for this unit ID."
    },
    "kbUnitGetArmyID": {
        "name": "kbUnitGetArmyID",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the army ID for this unit ID."
    },
    "kbUnitGetMovementType": {
        "name": "kbUnitGetMovementType",
        "return_type": "int",
        "params": [
            {
                "name": "unitTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the movementType for this unitTypeID."
    },
    "kbUnitGetCurrentAICost": {
        "name": "kbUnitGetCurrentAICost",
        "return_type": "float",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the current AI cost (worth) for this unit ID."
    },
    "kbUnitGetMaximumAICost": {
        "name": "kbUnitGetMaximumAICost",
        "return_type": "float",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the maximum AI cost (worth) for this unit ID."
    },
    "kbUnitGetPosition": {
        "name": "kbUnitGetPosition",
        "return_type": "vector",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the position for this unit ID. If we don't know a recent position of this unit it reports back as cNoRecentPositionKnown. Any unit that isn't visible under fog of war will be set to cNoRecentPositionKnown after 25-26 seconds of losing line of sight of the unit."
    },
    "kbUnitGetHeading": {
        "name": "kbUnitGetHeading",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the heading for this unit ID."
    },
    "kbUnitGetIdleTime": {
        "name": "kbUnitGetIdleTime",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the idle time for this unit ID."
    },
    "kbUnitIsType": {
        "name": "kbUnitIsType",
        "return_type": "bool",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if the unit is of the unitTypeID."
    },
    "kbUnitIsTrainingOrResearching": {
        "name": "kbUnitIsTrainingOrResearching",
        "return_type": "bool",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns true if this unit is Training or Researching."
    },
    "kbUnitIsEmpowered": {
        "name": "kbUnitIsEmpowered",
        "return_type": "bool",
        "params": [
            {
                "name": "uID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns true if this unit is empowered."
    },
    "kbUnitGetActionType": {
        "name": "kbUnitGetActionType",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the actionTypeID of the unit."
    },
    "kbUnitGetTargetUnitID": {
        "name": "kbUnitGetTargetUnitID",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the target unit ID of the given unit."
    },
    "kbUnitGetNumberWorkers": {
        "name": "kbUnitGetNumberWorkers",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the number of units currently working on the given unit."
    },
    "kbUnitGetWorkerID": {
        "name": "kbUnitGetWorkerID",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the index-th worker unit ID."
    },
    "kbUnitGetProtoUnitID": {
        "name": "kbUnitGetProtoUnitID",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the unit's protounit ID."
    },
    "kbUnitGetResourceAmount": {
        "name": "kbUnitGetResourceAmount",
        "return_type": "float",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns the resource amount of the unit."
    },
    "kbUnitGetCarryCapacity": {
        "name": "kbUnitGetCarryCapacity",
        "return_type": "float",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns the resource carry capacity of the unit."
    },
    "kbUnitIsInLush": {
        "name": "kbUnitIsInLush",
        "return_type": "bool",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if unit is within terrain lush belonging to the given player."
    },
    "kbUnitGetContainer": {
        "name": "kbUnitGetContainer",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the container for the given unit, or -1, if it's not being currently contained."
    },
    "kbUnitIsContainedBy": {
        "name": "kbUnitIsContainedBy",
        "return_type": "bool",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true, if unit is contained by a container belonging to the given unitType."
    },
    "kbUnitGetNumberContained": {
        "name": "kbUnitGetNumberContained",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the number of units contained within the given unit."
    },
    "kbUnitGetNumberContainedOfType": {
        "name": "kbUnitGetNumberContainedOfType",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the number of units contained of a particular unitType within the given unit."
    },
    "kbUnitGetContainedUnitByIndex": {
        "name": "kbUnitGetContainedUnitByIndex",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the ID for the unit contained at the given index, or -1, if it's invalid. Use in combination with the constants in the BKBData::BKBStatusEffect enum."
    },
    "kbUnitGetIsAffectedByStatusEffect": {
        "name": "kbUnitGetIsAffectedByStatusEffect",
        "return_type": "bool",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "statusEffectID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if the selected unit is affected by the given status effect."
    },
    "kbRelicGetTechID": {
        "name": "kbRelicGetTechID",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the tech ID for the given relic unit ID, or -1, if it's invalid."
    },
    "kbUnitGetNumberActions": {
        "name": "kbUnitGetNumberActions",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns number of actions of the unit."
    },
    "kbUnitGetActionID": {
        "name": "kbUnitGetActionID",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns action ID of the unit."
    },
    "kbUnitGetActionIDByIndex": {
        "name": "kbUnitGetActionIDByIndex",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns action ID at the index of the unit."
    },
    "kbUnitGetActionTypeByIndex": {
        "name": "kbUnitGetActionTypeByIndex",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns action type at the index of the unit."
    },
    "kbUnitGetMaintainActionPausedByIndex": {
        "name": "kbUnitGetMaintainActionPausedByIndex",
        "return_type": "bool",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns action is paused or not at the index of the unit."
    },
    "kbUnitGetActionMaximumRange": {
        "name": "kbUnitGetActionMaximumRange",
        "return_type": "float",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "actionName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the maximum range of the action for the unit."
    },
    "kbUnitGetKBResourceID": {
        "name": "kbUnitGetKBResourceID",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns what KB resource this unit is in."
    },
    "kbUnitGetCurAnimationID": {
        "name": "kbUnitGetCurAnimationID",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the ID of the current animation for the given unit."
    },
    "kbUnitGetDistanceToPoint": {
        "name": "kbUnitGetDistanceToPoint",
        "return_type": "float",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "p",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the distance from the given unit to the point including the unit's radius."
    },
    "kbUnitGetDistanceToUnit": {
        "name": "kbUnitGetDistanceToUnit",
        "return_type": "float",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "otherUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the distance from the given unit to other unit including the units' radii."
    },
    "kbUnitGetResourceAutoGatherRate": {
        "name": "kbUnitGetResourceAutoGatherRate",
        "return_type": "float",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resEnumID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the auto-gather rate value for the provided resource of a unit."
    },
    "kbProtoUnitGetIsValidID": {
        "name": "kbProtoUnitGetIsValidID",
        "return_type": "bool",
        "params": [
            {
                "name": "protoUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if the protoUnitID is valid."
    },
    "kbProtoUnitIsType": {
        "name": "kbProtoUnitIsType",
        "return_type": "bool",
        "params": [
            {
                "name": "protoUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitType",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if the protoUnit has the given unitType set."
    },
    "kbProtoUnitAvailable": {
        "name": "kbProtoUnitAvailable",
        "return_type": "bool",
        "params": [
            {
                "name": "protoUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if the protoUnit is currently available."
    },
    "kbProtoUnitCostPerResource": {
        "name": "kbProtoUnitCostPerResource",
        "return_type": "float",
        "params": [
            {
                "name": "protoUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns the cost of the protounit for the given resource."
    },
    "kbProtoUnitGetCost": {
        "name": "kbProtoUnitGetCost",
        "return_type": "float[]",
        "params": [
            {
                "name": "protoUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns the cost of the protounit."
    },
    "kbProtoUnitGetCostTotal": {
        "name": "kbProtoUnitGetCostTotal",
        "return_type": "float",
        "params": [
            {
                "name": "protoUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns the total cost of the protounit with AI cost weight factored in."
    },
    "kbProtoUnitGetGatherRate": {
        "name": "kbProtoUnitGetGatherRate",
        "return_type": "float",
        "params": [
            {
                "name": "protoUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourcePUID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "gets the unit gather rate."
    },
    "kbProtoUnitCanTrain": {
        "name": "kbProtoUnitCanTrain",
        "return_type": "bool",
        "params": [
            {
                "name": "protoUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "trainPUID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "checks whether the proto unit can train the specified unit."
    },
    "kbProtoUnitCanResearch": {
        "name": "kbProtoUnitCanResearch",
        "return_type": "bool",
        "params": [
            {
                "name": "protoUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "checks whether the proto unit can research the specific technology."
    },
    "kbProtoUnitGetTrainers": {
        "name": "kbProtoUnitGetTrainers",
        "return_type": "int[]",
        "params": [
            {
                "name": "protoUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns an array of all accessible PUIDs that can train this protoUnitID."
    },
    "kbProtoUnitGetName": {
        "name": "kbProtoUnitGetName",
        "return_type": "string",
        "params": [
            {
                "name": "protoUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the name of the protounit ID."
    },
    "kbUnitTypeGetName": {
        "name": "kbUnitTypeGetName",
        "return_type": "string",
        "params": [
            {
                "name": "unitTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the name of the unit type."
    },
    "kbUnitGetStatFloat": {
        "name": "kbUnitGetStatFloat",
        "return_type": "float",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "statEnumID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the value for the provided float stat of a unit."
    },
    "kbUnitGetActionStatFloat": {
        "name": "kbUnitGetActionStatFloat",
        "return_type": "float",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "actionName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "statEnumID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the value for the provided float stat of a provided unit action."
    },
    "kbPlayerGetProtoStatFloat": {
        "name": "kbPlayerGetProtoStatFloat",
        "return_type": "float",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "statEnumID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the value for the provided float stat of a player's proto unit."
    },
    "kbDefaultGetProtoStatFloat": {
        "name": "kbDefaultGetProtoStatFloat",
        "return_type": "float",
        "params": [
            {
                "name": "protoUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "statEnumID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the value for the provided float stat of a proto unit."
    },
    "kbUnitGetStatInt": {
        "name": "kbUnitGetStatInt",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "statEnumID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the value for the provided integer stat of a unit."
    },
    "kbPlayerGetProtoStatInt": {
        "name": "kbPlayerGetProtoStatInt",
        "return_type": "int",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "statEnumID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the value for the provided integer stat of a player's proto unit."
    },
    "kbDefaultGetProtoStatInt": {
        "name": "kbDefaultGetProtoStatInt",
        "return_type": "int",
        "params": [
            {
                "name": "protoUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "statEnumID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the value for the provided integer stat of a unit's proto unit."
    },
    "kbUnitGetStatBool": {
        "name": "kbUnitGetStatBool",
        "return_type": "bool",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "statEnumID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the value for the provided bool stat of a unit."
    },
    "kbPlayerGetProtoStatBool": {
        "name": "kbPlayerGetProtoStatBool",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "statEnumID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the value for the provided bool stat of a player's proto unit."
    },
    "kbDefaultGetProtoStatBool": {
        "name": "kbDefaultGetProtoStatBool",
        "return_type": "bool",
        "params": [
            {
                "name": "protoUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "statEnumID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the value for the provided bool stat of a unit's proto unit."
    },
    "kbUnitGetStatString": {
        "name": "kbUnitGetStatString",
        "return_type": "string",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "stat",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the value for the provided string stat of a unit."
    },
    "kbPlayerGetProtoStatString": {
        "name": "kbPlayerGetProtoStatString",
        "return_type": "string",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "stat",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the value for the provided string stat of a player's proto unit."
    },
    "kbDefaultGetProtoStatString": {
        "name": "kbDefaultGetProtoStatString",
        "return_type": "string",
        "params": [
            {
                "name": "protoUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "stat",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the value for the provided string stat of a base proto unit."
    },
    "kbGetMapCenter": {
        "name": "kbGetMapCenter",
        "return_type": "vector",
        "params": [],
        "desc": "Returns the center vector of the map."
    },
    "kbGetMapXSize": {
        "name": "kbGetMapXSize",
        "return_type": "float",
        "params": [],
        "desc": "Returns the X size of the map."
    },
    "kbGetMapZSize": {
        "name": "kbGetMapZSize",
        "return_type": "float",
        "params": [],
        "desc": "Returns the Z size of the map."
    },
    "kbGetIsLocationOnMap": {
        "name": "kbGetIsLocationOnMap",
        "return_type": "bool",
        "params": [
            {
                "name": "location",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns if the provided location is on the map."
    },
    "kbAreaGetIsIDValid": {
        "name": "kbAreaGetIsIDValid",
        "return_type": "bool",
        "params": [
            {
                "name": "areaID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns if the areaID is valid."
    },
    "kbAreaGetNumber": {
        "name": "kbAreaGetNumber",
        "return_type": "int",
        "params": [],
        "desc": "Returns the number of areas the KB has generated."
    },
    "kbAreaGetIDByPosition": {
        "name": "kbAreaGetIDByPosition",
        "return_type": "int",
        "params": [
            {
                "name": "position",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the areaID that is located at the given position."
    },
    "kbAreaGetGroupID": {
        "name": "kbAreaGetGroupID",
        "return_type": "int",
        "params": [
            {
                "name": "areaID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the areaGroupID of the given areaID."
    },
    "kbAreaGetCenter": {
        "name": "kbAreaGetCenter",
        "return_type": "vector",
        "params": [
            {
                "name": "areaID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the center of the given areaID."
    },
    "kbAreaGetNumberTiles": {
        "name": "kbAreaGetNumberTiles",
        "return_type": "int",
        "params": [
            {
                "name": "areaID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the number of tiles in the given areaID."
    },
    "kbAreaGetNumberBlackTiles": {
        "name": "kbAreaGetNumberBlackTiles",
        "return_type": "int",
        "params": [
            {
                "name": "areaID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the number of black tiles in the given areaID."
    },
    "kbAreaGetNumberVisibleTiles": {
        "name": "kbAreaGetNumberVisibleTiles",
        "return_type": "int",
        "params": [
            {
                "name": "areaID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the number of visible tiles in the given areaID."
    },
    "kbAreaGetNumberFogTiles": {
        "name": "kbAreaGetNumberFogTiles",
        "return_type": "int",
        "params": [
            {
                "name": "areaID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the number of fog tiles in the given areaID."
    },
    "kbAreaGetVisibilityChangeTime": {
        "name": "kbAreaGetVisibilityChangeTime",
        "return_type": "int",
        "params": [
            {
                "name": "areaID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the gametime in milliseconds of the last visibility change for the given areaID. If any of the tiles change their visibility status this timer is updated."
    },
    "kbAreaGetPercentExplored": {
        "name": "kbAreaGetPercentExplored",
        "return_type": "float",
        "params": [
            {
                "name": "areaID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns what percentage of tiles are either in fog or visible."
    },
    "kbAreaGetNumberUnits": {
        "name": "kbAreaGetNumberUnits",
        "return_type": "int",
        "params": [
            {
                "name": "areaID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the number of units in the given areaID."
    },
    "kbAreaGetUnitID": {
        "name": "kbAreaGetUnitID",
        "return_type": "int",
        "params": [
            {
                "name": "areaID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the unitID of the index-th unit in the given areaID."
    },
    "kbAreaGetNumberBorderAreas": {
        "name": "kbAreaGetNumberBorderAreas",
        "return_type": "int",
        "params": [
            {
                "name": "areaID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the number of border areas for the given areaID."
    },
    "kbAreaGetBorderAreaID": {
        "name": "kbAreaGetBorderAreaID",
        "return_type": "int",
        "params": [
            {
                "name": "areaID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the areaID of the index-th border area in the given areaID."
    },
    "kbAreaBordersAreaID": {
        "name": "kbAreaBordersAreaID",
        "return_type": "bool",
        "params": [
            {
                "name": "areaID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "borderAreaID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true of the provided areaID borders the provided borderAreaID."
    },
    "kbAreaGetClosestAreaID": {
        "name": "kbAreaGetClosestAreaID",
        "return_type": "int",
        "params": [
            {
                "name": "position",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "areaType",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "minDistance",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Scans from the given position for areas of the given type. Returns the areaID of the closest matching area. minDistance can be left undefined to set no distance at all, if defined the found areas must be within that distance. areaType MUST be defined."
    },
    "kbAreaGetType": {
        "name": "kbAreaGetType",
        "return_type": "int",
        "params": [
            {
                "name": "areaID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the type of the given areaID, cAreaType constants."
    },
    "kbAreaGetDangerLevel": {
        "name": "kbAreaGetDangerLevel",
        "return_type": "float",
        "params": [
            {
                "name": "areaID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "averageInBorderAreas",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the danger rating of the given areaID. If averageInBorderAreas is defined you will get the average rating of the provided area plus its border areas."
    },
    "kbAreaUpdateAllAreas": {
        "name": "kbAreaUpdateAllAreas",
        "return_type": "void",
        "params": [],
        "desc": "Force updates all the areas, use with caution due to performance concerns."
    },
    "kbAreaGroupGetIsIDValid": {
        "name": "kbAreaGroupGetIsIDValid",
        "return_type": "bool",
        "params": [
            {
                "name": "areaGroupID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns if the areaGroupID is valid."
    },
    "kbAreaGroupGetNumber": {
        "name": "kbAreaGroupGetNumber",
        "return_type": "int",
        "params": [],
        "desc": "Returns the number of area groups the KB has generated."
    },
    "kbAreaGroupGetAreaID": {
        "name": "kbAreaGroupGetAreaID",
        "return_type": "int",
        "params": [
            {
                "name": "areaGroupID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the areaID at the given index of the given areaGroupID."
    },
    "kbAreaGroupGetType": {
        "name": "kbAreaGroupGetType",
        "return_type": "int",
        "params": [
            {
                "name": "areaGroupID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the type of the given areaGroupID, cAreaGroupType constants."
    },
    "kbAreaGroupGetNumberAreas": {
        "name": "kbAreaGroupGetNumberAreas",
        "return_type": "int",
        "params": [
            {
                "name": "areaGroupID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the number of areas of the given areaGroupID."
    },
    "kbAreaGroupGetIDByPosition": {
        "name": "kbAreaGroupGetIDByPosition",
        "return_type": "int",
        "params": [
            {
                "name": "position",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the areaGroupID that is located at the given position."
    },
    "kbAreaGroupGetCenter": {
        "name": "kbAreaGroupGetCenter",
        "return_type": "vector",
        "params": [
            {
                "name": "areaGroupID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the center of the given areaGroupID."
    },
    "kbAreaGroupGetNumberBorderAreaGroups": {
        "name": "kbAreaGroupGetNumberBorderAreaGroups",
        "return_type": "int",
        "params": [
            {
                "name": "areaGroupID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the amount of border area groups this areaGroupID has."
    },
    "kbAreaGroupGetBorderAreaGroupID": {
        "name": "kbAreaGroupGetBorderAreaGroupID",
        "return_type": "int",
        "params": [
            {
                "name": "areaGroupID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the areaGroupID of the index-th border area group in the given areaGroupID."
    },
    "kbAreaGroupsBordersAreaGroupID": {
        "name": "kbAreaGroupsBordersAreaGroupID",
        "return_type": "bool",
        "params": [
            {
                "name": "areaGroupID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "borderAreaGroupID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true of the provided areaGroupID borders the provided borderAreaGroupID."
    },
    "kbAreaGroupGetSurfaceArea": {
        "name": "kbAreaGroupGetSurfaceArea",
        "return_type": "float",
        "params": [
            {
                "name": "areaGroupID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the surface area of the given areaGroupID."
    },
    "kbPathGetIsIDValid": {
        "name": "kbPathGetIsIDValid",
        "return_type": "bool",
        "params": [
            {
                "name": "pathID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns if the provided pathID is valid."
    },
    "kbPathCreate": {
        "name": "kbPathCreate",
        "return_type": "int",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Creates a path with the given name."
    },
    "kbPathDestroy": {
        "name": "kbPathDestroy",
        "return_type": "void",
        "params": [
            {
                "name": "pathID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Destroys the given path."
    },
    "kbPathGetNumber": {
        "name": "kbPathGetNumber",
        "return_type": "int",
        "params": [],
        "desc": "Returns the number of paths the KB has."
    },
    "kbPathGetIDByIndex": {
        "name": "kbPathGetIDByIndex",
        "return_type": "int",
        "params": [
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the index-th pathID, use in combination with kbPathGetNumber."
    },
    "kbPathGetIDByName": {
        "name": "kbPathGetIDByName",
        "return_type": "int",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the pathID of the given name."
    },
    "kbPathGetName": {
        "name": "kbPathGetName",
        "return_type": "string",
        "params": [
            {
                "name": "pathID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the name of the given path."
    },
    "kbPathGetLength": {
        "name": "kbPathGetLength",
        "return_type": "float",
        "params": [
            {
                "name": "pathID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the length of the given path."
    },
    "kbPathCalculateLength": {
        "name": "kbPathCalculateLength",
        "return_type": "float",
        "params": [
            {
                "name": "pathID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "ignoreY",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the length of the given path after calculating it."
    },
    "kbPathGetNumberWaypoints": {
        "name": "kbPathGetNumberWaypoints",
        "return_type": "int",
        "params": [
            {
                "name": "pathID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the number of waypoints in the given path."
    },
    "kbPathAddWaypoint": {
        "name": "kbPathAddWaypoint",
        "return_type": "void",
        "params": [
            {
                "name": "pathID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "wp",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Adds the waypoint to the given path."
    },
    "kbPathAddWaypointAfter": {
        "name": "kbPathAddWaypointAfter",
        "return_type": "void",
        "params": [
            {
                "name": "pathID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "wpIndex",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "wp",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Adds the waypoint to the given path."
    },
    "kbPathGetWaypoint": {
        "name": "kbPathGetWaypoint",
        "return_type": "vector",
        "params": [
            {
                "name": "pathID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "wpIndex",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the appropriate waypoint from the given path."
    },
    "kbPathCreateAreaPath": {
        "name": "kbPathCreateAreaPath",
        "return_type": "bool",
        "params": [
            {
                "name": "pathID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "startAreaID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "goalAreaID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "movementType",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "dangerThreshold",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "allowPartialPath",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "TODO."
    },
    "kbCanPath": {
        "name": "kbCanPath",
        "return_type": "bool",
        "params": [
            {
                "name": "pointA",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "pointB",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "range",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if the given unit type can path from pointA to pointB. Only performs high level pathing (ignores moveable obstructions like units)"
    },
    "kbCanAreaPath": {
        "name": "kbCanAreaPath",
        "return_type": "bool",
        "params": [
            {
                "name": "pointA",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "pointB",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "movementType",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "dangerThreshold",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "allowPartialPath",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "ignoreAreas",
                "type": "int[]",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if the given area path can be made."
    },
    "kbAttackRouteGetIsIDValid": {
        "name": "kbAttackRouteGetIsIDValid",
        "return_type": "bool",
        "params": [
            {
                "name": "routeID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns if the provided routeID is valid."
    },
    "kbCreateAttackRouteWithPath": {
        "name": "kbCreateAttackRouteWithPath",
        "return_type": "int",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "startPoint",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "endPoint",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "numInitialSectors",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the Route ID if successful. Creates an attack route and automatically adds some random attack sectors based on numInitialSectors. The startPoint/targetPoint/numInitialSectors only comes into play if you call kbAttackRouteCreatePaths as well. If you just need a route to add paths to manually then you need not worry about these 3 parameters. You can give attack routes that don't have kbAttackRouteCreatePaths called to attack plans directly, as long as you added valid paths yourself."
    },
    "kbAttackRouteGetByName": {
        "name": "kbAttackRouteGetByName",
        "return_type": "int",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the attack route ID with the matching name."
    },
    "kbAttackRouteDestroy": {
        "name": "kbAttackRouteDestroy",
        "return_type": "void",
        "params": [
            {
                "name": "routeID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Destroys the given routeID."
    },
    "kbAttackRouteGetNumber": {
        "name": "kbAttackRouteGetNumber",
        "return_type": "int",
        "params": [],
        "desc": "Returns the number of attack routes the KB has saved. Attention: this includes deleted attack routes."
    },
    "kbAttackRouteGetIDByIndex": {
        "name": "kbAttackRouteGetIDByIndex",
        "return_type": "int",
        "params": [
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the index-th attack route ID. Use in combination with kbAttackRouteGetNumber to know how many indexes there are. Attention: this can often return -1 since destroyed attack routes are also fetched by this."
    },
    "kbAttackRouteCreatePaths": {
        "name": "kbAttackRouteCreatePaths",
        "return_type": "bool",
        "params": [
            {
                "name": "routeID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "TODO DOESN'T WORK ATM. Creates all the paths following the provided parameters. The number of sectors equals the amount of paths generated."
    },
    "kbAttackRouteAddPath": {
        "name": "kbAttackRouteAddPath",
        "return_type": "void",
        "params": [
            {
                "name": "routeID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "pathID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "addRouteStartAndTargetPoints",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Adds the given pathID to the given routeID. If addRouteStartAndTargetPoints is true the path will be adjusted so its first waypoint is the startPoint of the route and the last waypoint is the targetPoint of the route (if they aren't already). Existing waypoints won't be altered, just new ones insterted potentially."
    },
    "kbAttackRouteGetNumberPaths": {
        "name": "kbAttackRouteGetNumberPaths",
        "return_type": "int",
        "params": [
            {
                "name": "routeID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns how many paths the given routeID has."
    },
    "kbAttackRouteGetPathIDByIndex": {
        "name": "kbAttackRouteGetPathIDByIndex",
        "return_type": "int",
        "params": [
            {
                "name": "routeID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the index-th path ID of the routeID. Use in combination with kbAttackRouteGetNumberPaths to know how many indexes there are."
    },
    "kbAttackRouteRemovePathByID": {
        "name": "kbAttackRouteRemovePathByID",
        "return_type": "void",
        "params": [
            {
                "name": "routeID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "pathID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Removes the given pathID from the given routeID. Attention: this does not delete the path, use kbPathDestroy for that."
    },
    "kbEscrowCreate": {
        "name": "kbEscrowCreate",
        "return_type": "int",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "percentage",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "parentID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Creates an escrow."
    },
    "kbEscrowDestroy": {
        "name": "kbEscrowDestroy",
        "return_type": "bool",
        "params": [
            {
                "name": "escrowID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "promoteChildren",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Destroys an escrow."
    },
    "kbEscrowGetID": {
        "name": "kbEscrowGetID",
        "return_type": "int",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the ID of the named escrow."
    },
    "kbEscrowGetPercentage": {
        "name": "kbEscrowGetPercentage",
        "return_type": "float",
        "params": [
            {
                "name": "escrowID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the percentage of the escrow."
    },
    "kbEscrowSetPercentage": {
        "name": "kbEscrowSetPercentage",
        "return_type": "bool",
        "params": [
            {
                "name": "escrowID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "percentage",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the percentage of the escrow."
    },
    "kbEscrowSetCap": {
        "name": "kbEscrowSetCap",
        "return_type": "bool",
        "params": [
            {
                "name": "escrowID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "cap",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the cap of the escrow."
    },
    "kbEscrowGetAmount": {
        "name": "kbEscrowGetAmount",
        "return_type": "float",
        "params": [
            {
                "name": "escrowID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the amount of credits in the given escrow for the given resource."
    },
    "kbEscrowFlush": {
        "name": "kbEscrowFlush",
        "return_type": "bool",
        "params": [
            {
                "name": "escrowID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "flushChildren",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Removes all credits (and puts them into the root escrow) of the given resource type from the given escrow."
    },
    "kbEscrowAllocateCurrentResources": {
        "name": "kbEscrowAllocateCurrentResources",
        "return_type": "bool",
        "params": [],
        "desc": "Reallocates the current resource stockpile into the escrows."
    },
    "kbCanAffordUnit": {
        "name": "kbCanAffordUnit",
        "return_type": "bool",
        "params": [
            {
                "name": "protoUnitTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "escrowID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if the player can afford the proto unit."
    },
    "kbSetResourceSelectorFactor": {
        "name": "kbSetResourceSelectorFactor",
        "return_type": "void",
        "params": [
            {
                "name": "type",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceType",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "val",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets the ResourceSelector Factor value."
    },
    "kbGetResourceSelectorFactor": {
        "name": "kbGetResourceSelectorFactor",
        "return_type": "float",
        "params": [
            {
                "name": "type",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceType",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "gets the ResourceSelector Factor value."
    },
    "kbAICostGetWeight": {
        "name": "kbAICostGetWeight",
        "return_type": "float",
        "params": [
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the AI cost weight for the given resource."
    },
    "kbAICostSetWeight": {
        "name": "kbAICostSetWeight",
        "return_type": "bool",
        "params": [
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "weight",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the weight this resource type is given during AI cost calculuations."
    },
    "kbAICostGetProtoUnitCost": {
        "name": "kbAICostGetProtoUnitCost",
        "return_type": "float",
        "params": [
            {
                "name": "protoUnitTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the AI cost for the given protoUnit type ID."
    },
    "kbAICostGetTechCost": {
        "name": "kbAICostGetTechCost",
        "return_type": "float",
        "params": [
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the AI cost for the given tech ID."
    },
    "kbBaseGetIsIDValid": {
        "name": "kbBaseGetIsIDValid",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns if the base exists for the player."
    },
    "kbBaseSetFlag": {
        "name": "kbBaseSetFlag",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "flag",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "state",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the flag for the base to the state."
    },
    "kbBaseIsFlagSet": {
        "name": "kbBaseIsFlagSet",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "flag",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Gets if the flag for the base is set to true."
    },
    "kbGetAutoMyBaseCreation": {
        "name": "kbGetAutoMyBaseCreation",
        "return_type": "bool",
        "params": [],
        "desc": "Returns the auto base creation value."
    },
    "kbSetAutoMyBaseCreation": {
        "name": "kbSetAutoMyBaseCreation",
        "return_type": "void",
        "params": [
            {
                "name": "v",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets whether or not the KB automatically creates bases for its OWN units."
    },
    "kbGetAutoMyBaseCreationDistance": {
        "name": "kbGetAutoMyBaseCreationDistance",
        "return_type": "float",
        "params": [],
        "desc": "Returns the auto base creation distance."
    },
    "kbSetAutoMyBaseCreationDistance": {
        "name": "kbSetAutoMyBaseCreationDistance",
        "return_type": "void",
        "params": [
            {
                "name": "distance",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the default distances for which OWN bases are made."
    },
    "kbGetAutoMyBaseCreationDistanceTC": {
        "name": "kbGetAutoMyBaseCreationDistanceTC",
        "return_type": "float",
        "params": [],
        "desc": "Returns the auto base creation distance."
    },
    "kbSetAutoMyBaseCreationDistanceTC": {
        "name": "kbSetAutoMyBaseCreationDistanceTC",
        "return_type": "void",
        "params": [
            {
                "name": "distance",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the default distances for which OWN bases are made."
    },
    "kbGetAutoOtherBaseCreation": {
        "name": "kbGetAutoOtherBaseCreation",
        "return_type": "bool",
        "params": [],
        "desc": "Returns the auto base detection value."
    },
    "kbSetAutoOtherBaseCreation": {
        "name": "kbSetAutoOtherBaseCreation",
        "return_type": "void",
        "params": [
            {
                "name": "v",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets whether or not the KB automatically creates bases for OTHER player's units."
    },
    "kbGetAutoOtherBaseCreationDistance": {
        "name": "kbGetAutoOtherBaseCreationDistance",
        "return_type": "float",
        "params": [],
        "desc": "Returns the auto base creation distance."
    },
    "kbSetAutoOtherBaseCreationDistance": {
        "name": "kbSetAutoOtherBaseCreationDistance",
        "return_type": "void",
        "params": [
            {
                "name": "distance",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the default distances for which OTHER player's bases are made."
    },
    "kbGetAutoOtherBaseCreationDistanceTC": {
        "name": "kbGetAutoOtherBaseCreationDistanceTC",
        "return_type": "float",
        "params": [],
        "desc": "Returns the auto base creation distance."
    },
    "kbSetAutoOtherBaseCreationDistanceTC": {
        "name": "kbSetAutoOtherBaseCreationDistanceTC",
        "return_type": "void",
        "params": [
            {
                "name": "distance",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the default distances for which OTHER player's bases are made."
    },
    "kbFindClosestBase": {
        "name": "kbFindClosestBase",
        "return_type": "int",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerRelation",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "location",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "militaryOnly",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Gets the nearest base belonging to playerID OR player relation from the location. Only returns bases with the military flag set if militaryBasesOnly is defined."
    },
    "kbBaseGetNextID": {
        "name": "kbBaseGetNextID",
        "return_type": "int",
        "params": [],
        "desc": "Returns the ID of the next base that will be created, can be used for base names."
    },
    "kbBaseGetNumber": {
        "name": "kbBaseGetNumber",
        "return_type": "int",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the number of bases for the given player."
    },
    "kbBaseGetIDByIndex": {
        "name": "kbBaseGetIDByIndex",
        "return_type": "int",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the BaseID for the given base."
    },
    "kbBaseGetNameByID": {
        "name": "kbBaseGetNameByID",
        "return_type": "string",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the name for the given base."
    },
    "kbBaseCreate": {
        "name": "kbBaseCreate",
        "return_type": "int",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "position",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "distance",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Creates a base."
    },
    "kbBaseFindOrCreateResourceBase": {
        "name": "kbBaseFindOrCreateResourceBase",
        "return_type": "int",
        "params": [
            {
                "name": "position",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceType",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceSubType",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "distance",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "dangerTreshold",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "unclaimedOnly",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "idleOnly",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "areaGroupsNeedToMatch",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "TODO."
    },
    "kbBaseDestroy": {
        "name": "kbBaseDestroy",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Destroys the given base."
    },
    "kbBaseDestroyAll": {
        "name": "kbBaseDestroyAll",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Destroys all of the bases for the given player."
    },
    "kbBaseGetLocation": {
        "name": "kbBaseGetLocation",
        "return_type": "vector",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Gets the location of the base."
    },
    "kbBaseGetLastKnownDamageLocation": {
        "name": "kbBaseGetLastKnownDamageLocation",
        "return_type": "vector",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Gets the last known damage location of the base."
    },
    "kbBaseGetOwner": {
        "name": "kbBaseGetOwner",
        "return_type": "int",
        "params": [
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the player ID of the specified base's owner."
    },
    "kbBaseSetFrontVector": {
        "name": "kbBaseSetFrontVector",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "front",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the front (and back) of the base."
    },
    "kbBaseGetFrontVector": {
        "name": "kbBaseGetFrontVector",
        "return_type": "vector",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Gets the front vector of the base."
    },
    "kbBaseGetBackVector": {
        "name": "kbBaseGetBackVector",
        "return_type": "vector",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Gets the back vector of the base."
    },
    "kbBaseGetTimeUnderAttack": {
        "name": "kbBaseGetTimeUnderAttack",
        "return_type": "int",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the number of continuous seconds the base has been under attack."
    },
    "kbBaseGetLastUnderAttackTime": {
        "name": "kbBaseGetLastUnderAttackTime",
        "return_type": "int",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the time when the base was last attacked."
    },
    "kbBaseGetDefenseRating": {
        "name": "kbBaseGetDefenseRating",
        "return_type": "float",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the defense rating for the base."
    },
    "kbBaseGetOffenseRating": {
        "name": "kbBaseGetOffenseRating",
        "return_type": "float",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the offense rating for the base."
    },
    "kbBaseGetMainID": {
        "name": "kbBaseGetMainID",
        "return_type": "int",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Gets the main base ID for the player."
    },
    "kbBaseGetMilitaryGatherPoint": {
        "name": "kbBaseGetMilitaryGatherPoint",
        "return_type": "vector",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Gets the military gather point of the base."
    },
    "kbBaseSetMilitaryGatherPoint": {
        "name": "kbBaseSetMilitaryGatherPoint",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "gatherPoint",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the military gather point of the base."
    },
    "kbBaseAddUnit": {
        "name": "kbBaseAddUnit",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Adds the given unit to the base."
    },
    "kbBaseRemoveUnit": {
        "name": "kbBaseRemoveUnit",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Removes the given unit to the base."
    },
    "kbBaseGetNumberUnitsOfType": {
        "name": "kbBaseGetNumberUnitsOfType",
        "return_type": "int",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the number of units that match the unitTypeID."
    },
    "kbBaseGetUnits": {
        "name": "kbBaseGetUnits",
        "return_type": "int[]",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the unitIDs of all the units that are in the base."
    },
    "kbBaseSetPositionAndDistance": {
        "name": "kbBaseSetPositionAndDistance",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "position",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "distance",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets position and distance of the base."
    },
    "kbBaseGetDistance": {
        "name": "kbBaseGetDistance",
        "return_type": "float",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Gets distance of the base."
    },
    "kbBaseSetDistance": {
        "name": "kbBaseSetDistance",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "newDistance",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets distance of the base."
    },
    "kbUnitPickGetIsIDValid": {
        "name": "kbUnitPickGetIsIDValid",
        "return_type": "bool",
        "params": [
            {
                "name": "upID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns if the upID is valid."
    },
    "kbUnitPickCreate": {
        "name": "kbUnitPickCreate",
        "return_type": "int",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Creates a unit picker and return the ID of it."
    },
    "kbUnitPickDestroy": {
        "name": "kbUnitPickDestroy",
        "return_type": "bool",
        "params": [
            {
                "name": "upID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Destroys the given upID."
    },
    "kbUnitPickResetAll": {
        "name": "kbUnitPickResetAll",
        "return_type": "void",
        "params": [
            {
                "name": "upID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Resets all the upID's values."
    },
    "kbUnitPickGetPreferenceWeight": {
        "name": "kbUnitPickGetPreferenceWeight",
        "return_type": "float",
        "params": [
            {
                "name": "upID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Gets the upID's preference weight."
    },
    "kbUnitPickSetPreferenceWeight": {
        "name": "kbUnitPickSetPreferenceWeight",
        "return_type": "void",
        "params": [
            {
                "name": "upID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "weight",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the upID's Preference weight. We multiply the unit preferences by this amount for a final preference weight. Setting unit preference values is done via kbUnitPickSetPreferenceFactor."
    },
    "kbUnitPickSetEnemyPlayerID": {
        "name": "kbUnitPickSetEnemyPlayerID",
        "return_type": "void",
        "params": [
            {
                "name": "upID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the upID's enemy player ID, -1 is allowed to not take any player into account. When we query to decide if we can go to counter mode we search for units belonging to this playerID. When analyzing the strength of units we take the stats of the units belonging to this playerID."
    },
    "kbUnitPickSetCombatEfficiencyWeight": {
        "name": "kbUnitPickSetCombatEfficiencyWeight",
        "return_type": "void",
        "params": [
            {
                "name": "upID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "weight",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the upID's Combat Efficiency weight. We multiply the unit combat efficiencies by this amount for a final combat efficiency weight. Setting combat efficiency values is done via kbUnitPickAddCombatEfficiencyType."
    },
    "kbUnitPickResetCombatEfficiencyTypes": {
        "name": "kbUnitPickResetCombatEfficiencyTypes",
        "return_type": "void",
        "params": [
            {
                "name": "upID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Resets the enemy unitTypeIDs for the upID's combat efficiency calculation."
    },
    "kbUnitPickAddCombatEfficiencyType": {
        "name": "kbUnitPickAddCombatEfficiencyType",
        "return_type": "bool",
        "params": [
            {
                "name": "upID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "weight",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Adds an enemy unitTypeID to the upID's combat efficiency calculation. This ONLY works after having used kbUnitPickSetEnemyPlayerID! This is ONLY used when we're NOT in counter mode and have to base our picks off default stats + weights. Example: we're NOT in counter mode and have only 1 combat efficiency set, against AbstractInfantry. We will now analyze all our valid units and test them against all enemy units that are AbstractInfantry. Which will results in our highest picks being units that do well against AbstractInfantry."
    },
    "kbUnitPickRemoveCombatEfficiencyType": {
        "name": "kbUnitPickRemoveCombatEfficiencyType",
        "return_type": "void",
        "params": [
            {
                "name": "upID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Removes a unitTypeID from the upID's combat efficiency calculation."
    },
    "kbUnitPickSetMovementType": {
        "name": "kbUnitPickSetMovementType",
        "return_type": "void",
        "params": [
            {
                "name": "upID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "movementType",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the upID's movement type, this is used to filter our own units. If any of our units don't have at least one of the specified movement types it's not valid. Use cPassability*** constants for this, you can stack multiple types on top of one another."
    },
    "kbUnitPickResetMovementType": {
        "name": "kbUnitPickResetMovementType",
        "return_type": "void",
        "params": [
            {
                "name": "upID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Resets the unit pick movement type to cPassabilityNone."
    },
    "kbUnitPickSetAttackUnitType": {
        "name": "kbUnitPickSetAttackUnitType",
        "return_type": "void",
        "params": [
            {
                "name": "upID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the upID's attack unit type. When we're querying to see if we have enough enemies to go into counter mode, this is the unitTypeID we use to query for."
    },
    "kbUnitPickGetAttackUnitType": {
        "name": "kbUnitPickGetAttackUnitType",
        "return_type": "int",
        "params": [
            {
                "name": "upID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Gets the upID's attack unit type."
    },
    "kbUnitPickSetPreferenceFactor": {
        "name": "kbUnitPickSetPreferenceFactor",
        "return_type": "bool",
        "params": [
            {
                "name": "upID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseFactor",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the upID's Preference Factor for that unitTypeID. A preference is a flat value that has two purposes: 1. Adding a unit to the list of our own valid units. If a unit has no preference set it won't be analyzed. 2. Artificially increasing the likelihood a unit does well in our analyzis (the preference is added to the total factor). If you add a preference for AbstractInfantry then all the units that are currently enabled for us with the AbstractInfantry tag will be added to our valid unit list. Setting a preference for a unit multiple times is supported, you just overwrite the previously set preference. Setting a preference of <= 0.0 will completely exclude those units from our valid list."
    },
    "kbUnitPickSetMinimumCounterModeNumberUnits": {
        "name": "kbUnitPickSetMinimumCounterModeNumberUnits",
        "return_type": "void",
        "params": [
            {
                "name": "upID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "numberUnits",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the minimum number of enemy units that have to be visible (not seeable only) to turn on counter enemy mode.Can be used together with kbUnitPickSetMinimumCounterModePop, if one of the two is true we will enter counter mode."
    },
    "kbUnitPickSetMinimumCounterModePop": {
        "name": "kbUnitPickSetMinimumCounterModePop",
        "return_type": "void",
        "params": [
            {
                "name": "upID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "pop",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the minimum total pop count of enemy units that have to be visible (not seeable only) to turn on counter enemy mode.Can be used together with kbUnitPickSetMinimumCounterModeNumberUnits, if one of the two is true we will enter counter mode."
    },
    "kbUnitPickRun": {
        "name": "kbUnitPickRun",
        "return_type": "int",
        "params": [
            {
                "name": "upID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Resets all the previous results and then runs the unit picker again. Returns how many results there are. Final results are calculated like this: Preference Factor * Preference Weight + Combat Efficiency value (determined via analysis) * Combat Efficiency Weight. Before you run a unit picker you should always do the entire setup of all the data again. This is because when you add preferences or combat efficiencies weights the code will look at the current state of the game to fill up its lists. So if you wanted to include AbstractInfantry in your own list of units and were Classical Zeus you only added Hoplites, Jason, and Heracles. But if in the meantime you're now Heroic the system won't have added Hypaspists to that list by itself. You need to set a preference weight for AbstractInfantry again to have Hypaspists added."
    },
    "kbUnitPickGetNumberResults": {
        "name": "kbUnitPickGetNumberResults",
        "return_type": "int",
        "params": [
            {
                "name": "upID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the number of results, can only be used after kbUnitPickRun."
    },
    "kbUnitPickGetResult": {
        "name": "kbUnitPickGetResult",
        "return_type": "int",
        "params": [
            {
                "name": "upID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the index-th ProtoUnitID, can only be used after kbUnitPickRun."
    },
    "kbUnitPickGetResults": {
        "name": "kbUnitPickGetResults",
        "return_type": "int[]",
        "params": [
            {
                "name": "upID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns all the results, can only be used after kbUnitPickRun."
    },
    "kbUnitPickGetResultFactor": {
        "name": "kbUnitPickGetResultFactor",
        "return_type": "float",
        "params": [
            {
                "name": "upID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the index-th total factor, can only be used after kbUnitPickRun."
    },
    "kbUnitPickGetResultFactors": {
        "name": "kbUnitPickGetResultFactors",
        "return_type": "float[]",
        "params": [
            {
                "name": "upID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns all the result factors, can only be used after kbUnitPickRun."
    },
    "kbUnitPickGetCounterMode": {
        "name": "kbUnitPickGetCounterMode",
        "return_type": "bool",
        "params": [
            {
                "name": "upID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns whether or not the unit picker actually went into counter mode, can only be used after kbUnitPickRun."
    },
    "kbGetAmountResourcesByAreaGroup": {
        "name": "kbGetAmountResourcesByAreaGroup",
        "return_type": "float[]",
        "params": [
            {
                "name": "areaGroupID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the amount of resources for the given area group."
    },
    "kbGetNumberValidResourcesByPosition": {
        "name": "kbGetNumberValidResourcesByPosition",
        "return_type": "int",
        "params": [
            {
                "name": "position",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceType",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceSubType",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "distance",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "dangerTreshold",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "unclaimedOnly",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "idleOnly",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "areaGroupsNeedToMatch",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the number of valid KB resources matching the parameters."
    },
    "kbGetAmountValidResourcesByPosition": {
        "name": "kbGetAmountValidResourcesByPosition",
        "return_type": "float",
        "params": [
            {
                "name": "position",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceType",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceSubType",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "distance",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "dangerTreshold",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "unclaimedOnly",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "idleOnly",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "areaGroupsNeedToMatch",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the combined resource amount of valid KB resources for the resource types."
    },
    "kbGetValidResourcesByPosition": {
        "name": "kbGetValidResourcesByPosition",
        "return_type": "int[]",
        "params": [
            {
                "name": "position",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceType",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceSubType",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "distance",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "dangerTreshold",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "unclaimedOnly",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "idleOnly",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "areaGroupsNeedToMatch",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the resourceIDs matching the parameters."
    },
    "kbResourceGetIsIDValid": {
        "name": "kbResourceGetIsIDValid",
        "return_type": "bool",
        "params": [
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns if the resourceID is valid."
    },
    "kbResourceGetNumber": {
        "name": "kbResourceGetNumber",
        "return_type": "int",
        "params": [],
        "desc": "Returns the number of KB resources that we currently have."
    },
    "kbResourceGetIDByIndex": {
        "name": "kbResourceGetIDByIndex",
        "return_type": "int",
        "params": [
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the resourceID at the index. Use kbResourceGetNumber to find out how many indexes there are."
    },
    "kbResourceGetIDByUnitID": {
        "name": "kbResourceGetIDByUnitID",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the resourceID of the given unitID."
    },
    "kbResourceGetType": {
        "name": "kbResourceGetType",
        "return_type": "int",
        "params": [
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the resourceID's type. A type here means the cResource constants, like cResourceFood."
    },
    "kbResourceGetSubType": {
        "name": "kbResourceGetSubType",
        "return_type": "int",
        "params": [
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the resourceID's subtype. A subtype here means the cAIResourceSubType constants, like cAIResourceSubTypeEasy."
    },
    "kbResourceGetNumberUnits": {
        "name": "kbResourceGetNumberUnits",
        "return_type": "int",
        "params": [
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns how many units are in the resourceID."
    },
    "kbResourceGetUnit": {
        "name": "kbResourceGetUnit",
        "return_type": "int",
        "params": [
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the unitID found at the index of the resourceID. Use together with kbResourceGetNumberUnits to find out how many index there are. ATTENTION: you should always check if the unitID that is returned is valid for this specific function."
    },
    "kbResourceGetPosition": {
        "name": "kbResourceGetPosition",
        "return_type": "vector",
        "params": [
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the position of the resourceID. This position is the center position of all units combined in the resourceID. ATTENTION: for Berry Bush resources this position isn't updated when certain Berry Bushes disappear. For forests it is updated when trees disappear."
    },
    "kbResourceSetBlacklisted": {
        "name": "kbResourceSetBlacklisted",
        "return_type": "void",
        "params": [
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "toggle",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Toggles whether or not the resourceID is blacklisted. A resource that is blacklisted can't be picked up by the automatic search for new KB resources that the gather plan does."
    },
    "kbResourceGetBlacklisted": {
        "name": "kbResourceGetBlacklisted",
        "return_type": "bool",
        "params": [
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns whether the resourceID is blacklisted or not."
    },
    "kbResourceGetTotalResources": {
        "name": "kbResourceGetTotalResources",
        "return_type": "float",
        "params": [
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the total amount of resources that are left in the resourceID. If for example 10 trees with each 150 wood remain in the resource this func will return 1500."
    },
    "kbResourceGetPlanID": {
        "name": "kbResourceGetPlanID",
        "return_type": "int",
        "params": [
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the planID that may be associated with the resourceID. Each gather plan that goes to gather from a resource will attach its planID to said resourceID."
    },
    "kbResourceGetClosestDropsiteID": {
        "name": "kbResourceGetClosestDropsiteID",
        "return_type": "int",
        "params": [
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the unitID of the dropsite that is closest to the center of the resourceID."
    },
    "kbResourceGetFarmIDWithFurthestAwayDropsite": {
        "name": "kbResourceGetFarmIDWithFurthestAwayDropsite",
        "return_type": "int",
        "params": [
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the unitID of the Farm that is furthest away from a dropsite of the resourceID."
    },
    "kbResourceCombineHerdableResourcesAroundUnit": {
        "name": "kbResourceCombineHerdableResourcesAroundUnit",
        "return_type": "void",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "distance",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Combines all Herdable KB Resources around the provided unitID within the provided distance. If there is already an active gather plan harvesting from one of the resources then all others will be merged into that resource."
    },
    "kbResourceSortTowardsPosition": {
        "name": "kbResourceSortTowardsPosition",
        "return_type": "void",
        "params": [
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "position",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sorts all the units in the resource towards to position."
    },
    "kbGetResourceName": {
        "name": "kbGetResourceName",
        "return_type": "string",
        "params": [
            {
                "name": "id",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the resource name."
    },
    "kbResourceGet": {
        "name": "kbResourceGet",
        "return_type": "float",
        "params": [
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the current amount of the given resource."
    },
    "kbMaximumResourceGet": {
        "name": "kbMaximumResourceGet",
        "return_type": "float",
        "params": [
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the maximum amount of the given resource you can have."
    },
    "kbGetNumberResourceGatherers": {
        "name": "kbGetNumberResourceGatherers",
        "return_type": "int",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Gets the number of gatherers of a resource for the given player."
    },
    "kbResourceGetIncome": {
        "name": "kbResourceGetIncome",
        "return_type": "float",
        "params": [
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "seconds",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "relative",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the resource income over the last X seconds."
    },
    "kbUnitVisible": {
        "name": "kbUnitVisible",
        "return_type": "bool",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if the unit is currently visible to the player."
    },
    "kbLocationVisible": {
        "name": "kbLocationVisible",
        "return_type": "bool",
        "params": [
            {
                "name": "location",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if the location is currently visible to the player."
    },
    "kbLocationFogged": {
        "name": "kbLocationFogged",
        "return_type": "bool",
        "params": [
            {
                "name": "location",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if the location is currently fogged to the player."
    },
    "kbFunctionUnitGetNumber": {
        "name": "kbFunctionUnitGetNumber",
        "return_type": "int",
        "params": [
            {
                "name": "civ",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "function",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Gets the number of function units from the given civ and function."
    },
    "kbFunctionUnitGetByIndex": {
        "name": "kbFunctionUnitGetByIndex",
        "return_type": "int",
        "params": [
            {
                "name": "civ",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "function",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Gets the function unit from the given civ and function at index."
    },
    "kbSharedFunctionUnitGetNumber": {
        "name": "kbSharedFunctionUnitGetNumber",
        "return_type": "int",
        "params": [
            {
                "name": "function",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Gets the number of shared function units from the given function."
    },
    "kbSharedFunctionUnitGetByIndex": {
        "name": "kbSharedFunctionUnitGetByIndex",
        "return_type": "int",
        "params": [
            {
                "name": "function",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Gets the shared function unit with the given function at index."
    },
    "kbBuildingPlacementCreate": {
        "name": "kbBuildingPlacementCreate",
        "return_type": "int",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Creates a building placement with the given name (no concurrent duplicates), returns the bpID."
    },
    "kbBuildingPlacementDestroy": {
        "name": "kbBuildingPlacementDestroy",
        "return_type": "void",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Destroys the bpID, freeing up its name/potential existing lot too."
    },
    "kbBuildingPlacementGetIsIDValid": {
        "name": "kbBuildingPlacementGetIsIDValid",
        "return_type": "bool",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns whether the bpID is valid or not."
    },
    "kbBuildingPlacementGetState": {
        "name": "kbBuildingPlacementGetState",
        "return_type": "int",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the bpID's state, cBuildingPlacementPlacementState constants."
    },
    "kbBuildingPlacementGetPlacementType": {
        "name": "kbBuildingPlacementGetPlacementType",
        "return_type": "int",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the bpID's placement type, cBuildingPlacementPlacementType constants."
    },
    "kbBuildingPlacementGetBaseID": {
        "name": "kbBuildingPlacementGetBaseID",
        "return_type": "int",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the bpID's base ID, which is only set via kbBuildingPlacementSetBaseID."
    },
    "kbBuildingPlacementSetBufferSpace": {
        "name": "kbBuildingPlacementSetBufferSpace",
        "return_type": "void",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "bufferSpace",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the bpID's buffer space, must be >= 0.0. This control the minimum distance the building will be placed away from anything else that also has obstruction. Defaults to 2.0."
    },
    "kbBuildingPlacementGetBufferSpace": {
        "name": "kbBuildingPlacementGetBufferSpace",
        "return_type": "float",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the buffer space set for this bpID."
    },
    "kbBuildingPlacementSetStepSize": {
        "name": "kbBuildingPlacementSetStepSize",
        "return_type": "void",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "stepSize",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets how big the step sizes are with which the bpID goes through the grid assigned to analyze. Default is 2.0.This is used for every placement type apart from socket. Example: you use kbBuildingPlacementSetCenterPosition(X/Z = 10.0, 5.0). This means that we will analyze all the spots between X/Z = 5.0 and X/Z = 15.0. The stepSize is used to increment X and Z until we've analyzed all spots. If we for this example take a stepSize of 5.0 we get the following: X=5, X=10, X=15 with Z remaining 5 are analyzed in the first run (we analyze one X row at a time and then increment Z). After this first run we increment Z with 5.0 (stepSize) and go again like follows: X=5, X=10, X=15 with Z being 10. And then we do our last run and we get 9 total spots that we've analyzed. Big stepSizes means that we analyze fewer spots/less precise but the building placement goes faster. Because if you use kbBuildingPlacementSetBaseID we need to analyze all the spots in a base, with a low stepSize that can take a while."
    },
    "kbBuildingPlacementSetBuildingPUID": {
        "name": "kbBuildingPlacementSetBuildingPUID",
        "return_type": "void",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "buildingTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the building that will be used during all the analysis of the given bpID. This must be a protoUnit, it can't be an abstractType."
    },
    "kbBuildingPlacementGetBuildingPUID": {
        "name": "kbBuildingPlacementGetBuildingPUID",
        "return_type": "int",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Gets the building set by kbBuildingPlacementSetBuildingPUID for the given bpID."
    },
    "kbBuildingPlacementSetBaseID": {
        "name": "kbBuildingPlacementSetBaseID",
        "return_type": "void",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "orientationPreference",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Puts this bpID into Base PlacementType using center position calculations, only one Type can be active at a time! This resets all influences, so do this first! Sets the base ID for this bpID which can be fetched via kbBuildingPlacementGetBaseID. Setting a base ID works as follows: it adds the center position of the base as the center position for the analysis. And it then adds the distance of the base as the distance. Thus a base with a center on X/Z=50 and a range of 25.0 makes it analyze everything from X/Z=25 to X/Z=75. Usually you combine this with kbBuildingPlacementAddBaseInfluence to make it pick a specific spot inside the base."
    },
    "kbBuildingPlacementSetSocketID": {
        "name": "kbBuildingPlacementSetSocketID",
        "return_type": "void",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "socketID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets this bpID into Socket PlacementType, only one Type can be active at a time! Sets the bpID's socket ID, which must be a valid unit ID."
    },
    "kbBuildingPlacementSetDockPositions": {
        "name": "kbBuildingPlacementSetDockPositions",
        "return_type": "void",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "landPosition",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "waterPosition",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Puts this bpID into Dock building mode with Area PlacementType using area calculations, only one Type can be active at a time! Sets the two points from which the building placement will calculate a possible Dock position. It will create a path as the crow flies between both points and must find a shoreline area on the way (the landPosition is included as the first waypoint on this path). Once it has found a shoreline area it will check all areas surrounding that specific shoreline area, and if they're also of the type shoreline it will add them too to the list of areas to analyze. These automatically added areas have no influence added to them and don't add border areas, they're just valid spots. The landPosition and waterPosition both get a position influence of 100 value in 100 range with linear falloff."
    },
    "kbBuildingPlacementSetCenterPosition": {
        "name": "kbBuildingPlacementSetCenterPosition",
        "return_type": "void",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "position",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "distance",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Puts this bpID into CenterPosition PlacementType, only one Type can be active at a time! This resets all influences, so do this first! Read the explanation for kbBuildingPlacementSetStepSize to learn how this works."
    },
    "kbBuildingPlacementSetAreaGroupID": {
        "name": "kbBuildingPlacementSetAreaGroupID",
        "return_type": "void",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "areaGroupID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Puts this bpID into area PlacementType using area calculations, only one Type can be active at a time! This resets all influences, so do this first! Adds all areas belonging to the areaGroupID to the given bpID. It also adds the center of the areas as a position influence of: 100 range, 30 value, and linear falloff."
    },
    "kbBuildingPlacementAddAreaID": {
        "name": "kbBuildingPlacementAddAreaID",
        "return_type": "void",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "areaID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "numberBorderAreaLayers",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "addCenterInfluence",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Puts this bpID into area PlacementType using area calculations, only one Type can be active at a time! You can call this function multiple times per bpID to add multiple areas, that's why it's called \"add\" and not \"set\". Adds the AreaID to the bpID, addCenterInfluence adds a positional influence from the areaID center with 100 value, 30 range, and linear falloff. If numberBorderAreaLayers is 1 we loop through all our border areas and add them in the same way we did the original areaID (but no center influence). If numberBorderAreaLayers is 2 we also loop through all the newly added areas and add all their border areas too (no duplicates will be created). You can put numberBorderAreaLayers as high as you want but it will of course create the biggest placement ever."
    },
    "kbBuildingPlacementAddUnitInfluence": {
        "name": "kbBuildingPlacementAddUnitInfluence",
        "return_type": "void",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "influenceValue",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "influenceDistance",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "falloff",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "kbResourceID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerOrRelation",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Adds a unit influence to the bpID, you can only do this AFTER setting your PlacementType. Example: the spot we're analyzing is at X/Z=15. We have a unit influence for cUnitTypeHouse with 25.0 value, 5.0 distance, and linear falloff. There is a House located at X/Z=12.5, now the following happens: The House is within 5.0 distance of our spot so the unit influence will be analyzed. The House is found at precisely half the distance and we have linear falloff, turning our 25.0 value into 12.5 being added to this spot's value. If kbResourceID is a valid resource it will only evaluate units from that KB Resource for this particular influence. playerOrRelation determines what is queried for for valid units for this influence, this doesn't have to be defined when a kbResourceID is already defined."
    },
    "kbBuildingPlacementAddBaseInfluence": {
        "name": "kbBuildingPlacementAddBaseInfluence",
        "return_type": "void",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "baseID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "orientationPreference",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "influenceValue",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "falloff",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Adds a base influence to the bpID, you can only do this AFTER setting your PlacementType. It's called BaseInfluence because of the input variables, but in the end this just adds a special position influence to the bpID. For the first step it works like any other position influence and calculates the value as normal using the commonly used parameters. But then there are 2 important/unique things: 1. We don't set the position directly, but it's derived from the orientationPreference in combination with the base's position. 2. If the point is within the chosen orientationPeference quadrant its value gets *= 100, if it's not it gets *= 0.1."
    },
    "kbBuildingPlacementAddPositionInfluence": {
        "name": "kbBuildingPlacementAddPositionInfluence",
        "return_type": "void",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "position",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "influenceValue",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "influenceDistance",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "falloff",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Adds the position influence for the given bpID, you can only do this AFTER setting your PlacementType. This works precisely the same as kbBuildingPlacementAddUnitInfluence but instead of looking for a unit within range we just increase the value if the position is within range."
    },
    "kbBuildingPlacementSetInnerRingRange": {
        "name": "kbBuildingPlacementSetInnerRingRange",
        "return_type": "void",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "innerRingRange",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "In base mode every building placement has an mechanic active that prefers positions within an \"inner ring\" over positions in the \"outer ring\". So even if a position in the outer ring has 100000 value and the position in the inner ring has 10 value the inner ring position will always be chosen. This mechanic is used to make sure we build close to the base's center wherever possible, because building too far away is potentially very bad. The default value for this is set to 37.50 on every building placement. Putting it to your base's size or above practically removes this mechanic from the placement."
    },
    "kbBuildingPlacementSetMinimumValue": {
        "name": "kbBuildingPlacementSetMinimumValue",
        "return_type": "void",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "minimumValue",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the minimum value a spot must have to be considered valid for the provided bpID. Defaults to 0.0."
    },
    "kbBuildingPlacementSetRandomness": {
        "name": "kbBuildingPlacementSetRandomness",
        "return_type": "void",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "randomness",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets if the bpID will randomize the results a bit. Defaults to false.It will chose a number between -50% and +50% of the original value."
    },
    "kbBuildingPlacementSetCheckGPExclusion": {
        "name": "kbBuildingPlacementSetCheckGPExclusion",
        "return_type": "void",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "exclusion",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets if the given bpID will take current GP Exclusion effects into account. Defaults to true."
    },
    "kbBuildingPlacementSetLOSType": {
        "name": "kbBuildingPlacementSetLOSType",
        "return_type": "void",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "LOSType",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the given bpID's LOS type. If set to cBuildingPlacementLOSNormal (default) the location must have active visibility or be under fog to be valid. If set to cBuildingPlacementFullVisible the location must have active visibility to be valid. Regardless of the mode, any spot in the blackmap is not valid."
    },
    "kbBuildingPlacementSetRequiresCompletelyUnobstructed": {
        "name": "kbBuildingPlacementSetRequiresCompletelyUnobstructed",
        "return_type": "void",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "requiresCompletelyUnobstructed",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets if the given BPID's obstruction check should fail if there is any obstruction at all. Ordinarily units are ignored in this obstruction check since they can move off the foundation. But with this to true units will also cause specific spots to fail."
    },
    "kbBuildingPlacementStart": {
        "name": "kbBuildingPlacementStart",
        "return_type": "void",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Starts the bpID's process of analyzing all the possible spots. Depending on the amount of spots that have to be analyzed this may take longer than a second. If this bpID is part of a build/godpower plan the plan will start it itself, and will also automatically destroy it. If we're manually managing the bpID it won't be automatically started/destroyed."
    },
    "kbBuildingPlacementGetBestResultPosition": {
        "name": "kbBuildingPlacementGetBestResultPosition",
        "return_type": "vector",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the best result's position for bpID."
    },
    "kbBuildingPlacementGetBestResultValue": {
        "name": "kbBuildingPlacementGetBestResultValue",
        "return_type": "float",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the best result's value for bpID."
    },
    "kbBuildingPlacementClearPlacementType": {
        "name": "kbBuildingPlacementClearPlacementType",
        "return_type": "void",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Resets the given bpID's PlacementType and influences, allowing you to configure it again without errors."
    },
    "kbBuildingPlacementSetEventHandler": {
        "name": "kbBuildingPlacementSetEventHandler",
        "return_type": "void",
        "params": [
            {
                "name": "bpID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "eventType",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "handlerName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets an event handler for the bpID and event, use cBuildingPlacementEvent."
    },
    "kbGodPowerGetIsIDValid": {
        "name": "kbGodPowerGetIsIDValid",
        "return_type": "bool",
        "params": [
            {
                "name": "protoPowerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns if the provided protoPowerID corresponds to a valid god power."
    },
    "kbGodPowerGetName": {
        "name": "kbGodPowerGetName",
        "return_type": "string",
        "params": [
            {
                "name": "protoPowerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the name of the given protoPowerID."
    },
    "kbGodPowerGetID": {
        "name": "kbGodPowerGetID",
        "return_type": "int",
        "params": [
            {
                "name": "protoPowerName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the ID for the given protoPowerName."
    },
    "kbGodPowerCheckActive": {
        "name": "kbGodPowerCheckActive",
        "return_type": "bool",
        "params": [
            {
                "name": "protoPowerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns whether that God Power type, for that player, is currently in effect"
    },
    "kbGodPowerCheckActiveForAnyPlayer": {
        "name": "kbGodPowerCheckActiveForAnyPlayer",
        "return_type": "bool",
        "params": [
            {
                "name": "protoPowerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns whether that God Power type is currently in effect"
    },
    "kbGodPowerGetNumCharges": {
        "name": "kbGodPowerGetNumCharges",
        "return_type": "int",
        "params": [
            {
                "name": "protoPowerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns the number of available charges/uses of given God Power for a player"
    },
    "kbGodPowerIsOnCooldown": {
        "name": "kbGodPowerIsOnCooldown",
        "return_type": "bool",
        "params": [
            {
                "name": "protoPowerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns whether the given God Power, for that player, is currently under cooldown"
    },
    "kbGodPowerGetNumUsedTimes": {
        "name": "kbGodPowerGetNumUsedTimes",
        "return_type": "int",
        "params": [
            {
                "name": "protoPowerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns the number of times the given God Power has been used by the given player"
    },
    "kbGodPowerIsRepeatable": {
        "name": "kbGodPowerIsRepeatable",
        "return_type": "bool",
        "params": [
            {
                "name": "protoPowerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns 'true' if the given God Power is infinitely castable by the given player"
    },
    "kbGodPowerGetCost": {
        "name": "kbGodPowerGetCost",
        "return_type": "float",
        "params": [
            {
                "name": "protoPowerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "includePrePurchased",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns the current cost of the given God Power for the given player"
    },
    "kbGodPowerGetDataCost": {
        "name": "kbGodPowerGetDataCost",
        "return_type": "float",
        "params": [
            {
                "name": "protoPowerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns the current base cost of the given God Power within power data for the given player"
    },
    "kbGodPowerGetDataRepeatCost": {
        "name": "kbGodPowerGetDataRepeatCost",
        "return_type": "float",
        "params": [
            {
                "name": "protoPowerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns the current base repeat cost of the given God Power within power data for the given player"
    },
    "kbGodPowerCanPrePurchase": {
        "name": "kbGodPowerCanPrePurchase",
        "return_type": "bool",
        "params": [
            {
                "name": "protoPowerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns 'true' if the given God Power is currently pre-purchasable by the given player"
    },
    "kbGodPowerGetPrePurchaseCost": {
        "name": "kbGodPowerGetPrePurchaseCost",
        "return_type": "float",
        "params": [
            {
                "name": "protoPowerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "numUses",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns the current cost of pre-purchasing the provided number of charges of a God Power for the given player"
    },
    "kbGodPowerGetNumPrePurchasedUses": {
        "name": "kbGodPowerGetNumPrePurchasedUses",
        "return_type": "int",
        "params": [
            {
                "name": "protoPowerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns the current number of pre-purchased uses/charges of a God Power for the given player"
    },
    "kbGodPowerGetIDInSlot": {
        "name": "kbGodPowerGetIDInSlot",
        "return_type": "int",
        "params": [
            {
                "name": "slotIndex",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the protoPowerID of the god power that is currently in the slotIndex for the given playerID."
    },
    "kbGodPowerGetRadius": {
        "name": "kbGodPowerGetRadius",
        "return_type": "float",
        "params": [
            {
                "name": "protoPowerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the radius of the provided protoPowerID for the given playerID."
    },
    "kbGodPowerCastEventGetCastLocation": {
        "name": "kbGodPowerCastEventGetCastLocation",
        "return_type": "vector",
        "params": [
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "TODO."
    },
    "kbGodPowerCastEventInfoGetCaster": {
        "name": "kbGodPowerCastEventInfoGetCaster",
        "return_type": "int",
        "params": [
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "TODO."
    },
    "kbGodPowerCastEventInfoGetProtoPower": {
        "name": "kbGodPowerCastEventInfoGetProtoPower",
        "return_type": "int",
        "params": [
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "TODO."
    },
    "kbGetMarketBuyCost": {
        "name": "kbGetMarketBuyCost",
        "return_type": "float",
        "params": [
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the gold amount required to buy 100 of the given resource."
    },
    "kbGetMarketSellReward": {
        "name": "kbGetMarketSellReward",
        "return_type": "float",
        "params": [
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the gold amount received for selling 100 of the given resource."
    },
    "kbGetResourceID": {
        "name": "kbGetResourceID",
        "return_type": "int",
        "params": [
            {
                "name": "resName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the resource ID."
    },
    "kbGetUnitTypeID": {
        "name": "kbGetUnitTypeID",
        "return_type": "int",
        "params": [
            {
                "name": "typeName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the unitType ID."
    },
    "kbGetStatValueInt": {
        "name": "kbGetStatValueInt",
        "return_type": "int",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "statID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "param",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Gets the value of any given KB Stat as integer."
    },
    "kbGetStatValueFloat": {
        "name": "kbGetStatValueFloat",
        "return_type": "float",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "statID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "param",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Gets the value of a given KB Stat as float."
    },
    "kbGetResourceAmount": {
        "name": "kbGetResourceAmount",
        "return_type": "float",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Gets current amount of the given resource."
    },
    "kbGetTotalResourceAmount": {
        "name": "kbGetTotalResourceAmount",
        "return_type": "float",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Gets total amount of given resource so far."
    },
    "kbGetNumberUnitTypeKilled": {
        "name": "kbGetNumberUnitTypeKilled",
        "return_type": "int",
        "params": [
            {
                "name": "unitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Gets the number of units killed of the given unitType."
    },
    "kbUnitTypeCount": {
        "name": "kbUnitTypeCount",
        "return_type": "int",
        "params": [
            {
                "name": "unitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "stateID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "excludeKnockout",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns a quick unit count of units for a player."
    },
    "kbUnitTypeCountInArea": {
        "name": "kbUnitTypeCountInArea",
        "return_type": "int",
        "params": [
            {
                "name": "unitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "stateID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "centerUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "radius",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns a quick unit count of units for a player, within the vicinity of the given center unit."
    },
    "kbProtoUnitGetID": {
        "name": "kbProtoUnitGetID",
        "return_type": "int",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the ID of the protounit."
    },
    "kbGetAnimationID": {
        "name": "kbGetAnimationID",
        "return_type": "int",
        "params": [
            {
                "name": "animName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the hashed ID for a given animation name."
    },
    "kbGetPopulationSlotsByUnitTypeID": {
        "name": "kbGetPopulationSlotsByUnitTypeID",
        "return_type": "int",
        "params": [
            {
                "name": "unitTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the number of pop slots currently occupied by this unit type."
    },
    "kbGetRandomUnitID": {
        "name": "kbGetRandomUnitID",
        "return_type": "int",
        "params": [],
        "desc": "Returns the ID of a random unit among the living units on the map, belonging to any player, including Mother Nature units."
    },
    "kbFindBestBuildingToRepair": {
        "name": "kbFindBestBuildingToRepair",
        "return_type": "int",
        "params": [
            {
                "name": "position",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "distance",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "healthRatio",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "repairUnderAttackUnitTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns the id of the best building to repair."
    },
    "kbGetCombatEfficiency": {
        "name": "kbGetCombatEfficiency",
        "return_type": "float",
        "params": [
            {
                "name": "playerID1",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitTypeID1",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID2",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitTypeID2",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "ignoreTrainCheck",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the combat efficiency of the comparison (in terms of playerID1's units)."
    },
    "kbUnitCount": {
        "name": "kbUnitCount",
        "return_type": "int",
        "params": [
            {
                "name": "unitTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "stateID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns a quick unit count of units for a player."
    },
    "kbGetIslandMap": {
        "name": "kbGetIslandMap",
        "return_type": "bool",
        "params": [],
        "desc": "Returns whether this map is an island map or not. If not every land area group has a land path to every other land area group this will return true."
    },
    "kbGetIsFFA": {
        "name": "kbGetIsFFA",
        "return_type": "bool",
        "params": [],
        "desc": "checks whether we have FFA turned on or not."
    },
    "kbGetAlliedTradingBonus": {
        "name": "kbGetAlliedTradingBonus",
        "return_type": "float",
        "params": [],
        "desc": "Returns allied trading bonus."
    },
    "kbGetKOTHVictoryTime": {
        "name": "kbGetKOTHVictoryTime",
        "return_type": "int",
        "params": [],
        "desc": "Returns how long a KOTH needs to be held for for the team to win, in seconds."
    },
    "kbLookAtAllUnitsOnMap": {
        "name": "kbLookAtAllUnitsOnMap",
        "return_type": "void",
        "params": [
            {
                "name": "ignoreNature",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Cheats and looks at all of the units on the map. This will format your harddrive if you're not authorized to use it."
    },
    "kbProgressionGetTotalNodes": {
        "name": "kbProgressionGetTotalNodes",
        "return_type": "int",
        "params": [
            {
                "name": "progressionID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the total number of steps to complete the progression."
    },
    "kbProgessionGetTotalResourceCost": {
        "name": "kbProgessionGetTotalResourceCost",
        "return_type": "float",
        "params": [
            {
                "name": "progressionID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the total cost of the given resource for this progressionID. A resourceID of -1 will return the total Cost."
    },
    "kbProgressionGetNodeType": {
        "name": "kbProgressionGetNodeType",
        "return_type": "int",
        "params": [
            {
                "name": "progressionID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "nodeIndex",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the type of node at the given index, either Unit type or Tech type."
    },
    "kbProgressionGetNodeData": {
        "name": "kbProgressionGetNodeData",
        "return_type": "int",
        "params": [
            {
                "name": "progressionID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "nodeIndex",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the data at nodeIndex, either UnitID or TechID, depending on the type."
    },
    "kbCreateUnitProgression": {
        "name": "kbCreateUnitProgression",
        "return_type": "int",
        "params": [
            {
                "name": "unitName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Creates a unit progression of the given name."
    },
    "kbCreateTechProgression": {
        "name": "kbCreateTechProgression",
        "return_type": "int",
        "params": [
            {
                "name": "techName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Creates a tech progression of the given name."
    },
    "kbTechGetStatus": {
        "name": "kbTechGetStatus",
        "return_type": "int",
        "params": [
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "checkPrereqs",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the current tech status for the provided techID. Takes prereqs into account if checkPrereqs is set to true. The return values correspond with the cTechStatus constants."
    },
    "kbTechGetPercentComplete": {
        "name": "kbTechGetPercentComplete",
        "return_type": "float",
        "params": [
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the percent complete for the provided techID. The return value will be within 0.0 and 1.0. (inclusive)"
    },
    "kbTechGetResearchPoints": {
        "name": "kbTechGetResearchPoints",
        "return_type": "float",
        "params": [
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the research points for the provided techID."
    },
    "kbTechGetName": {
        "name": "kbTechGetName",
        "return_type": "string",
        "params": [
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the name for the provided techID."
    },
    "kbTechGetFlag": {
        "name": "kbTechGetFlag",
        "return_type": "bool",
        "params": [
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "flag",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns if the flag is set for the given techID."
    },
    "kbTechTreeGetCheapestUnitUpgrade": {
        "name": "kbTechTreeGetCheapestUnitUpgrade",
        "return_type": "int",
        "params": [
            {
                "name": "protoUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "researcherTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "gets cheapest researchable unit upgrade, optionally for specified unit/unit line."
    },
    "kbTechTreeGetAllObtainableTechnologies": {
        "name": "kbTechTreeGetAllObtainableTechnologies",
        "return_type": "int[]",
        "params": [
            {
                "name": "needAliveResearcher",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns all technology IDs of the technologies that are obtainable to us (excluding age ups and technologies which prereqs we haven't met), the IDs correspond to the cTech constants. If needAliveResearcher is true we exclude technologies for which we have no building alive to research it."
    },
    "kbTechTreeGetResearchers": {
        "name": "kbTechTreeGetResearchers",
        "return_type": "int[]",
        "params": [
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns all PUIDs that are available to us and that can research the provided techID."
    },
    "kbTechAffectsUnitType": {
        "name": "kbTechAffectsUnitType",
        "return_type": "bool",
        "params": [
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns if the provided techID affects the provided unitTypeID. Detail: this only looks at cEffectTypeData effects."
    },
    "kbTechAffectsWorkRate": {
        "name": "kbTechAffectsWorkRate",
        "return_type": "bool",
        "params": [
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns if the techID affects work rate in any way, for this resourceID must be left at -1. If resourceID is defined it will return if the techID affects the work rate of a specific resourceID."
    },
    "kbTechCanAfford": {
        "name": "kbTechCanAfford",
        "return_type": "bool",
        "params": [
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "escrowID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns if the player can afford the provided techID with the current resource stockpile. If provided the escrow will be taken into account."
    },
    "kbTechCostPerResource": {
        "name": "kbTechCostPerResource",
        "return_type": "float",
        "params": [
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the cost of the provided techID for the given resourceID."
    },
    "kbTechGetCost": {
        "name": "kbTechGetCost",
        "return_type": "float[]",
        "params": [
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the cost of the provided techID, without taking AI weights into account."
    },
    "kbTechGetCostTotal": {
        "name": "kbTechGetCostTotal",
        "return_type": "float",
        "params": [
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the total cost of the provided techID, takes AI weights into account."
    },
    "kbTechGetNumberEffects": {
        "name": "kbTechGetNumberEffects",
        "return_type": "int",
        "params": [
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the number of \"<Effect>\" nodes of the tech. CAUTION: this number also includes effects that we're unable to give any information for. Only the \" type='Data' \" is supported with all other syscalls. For example: a technology could have 4 effects, 3 are data changing effects and one effect sets another tech to active (\"type='TechStatus'\"). Using this syscall will give you back the number 4. But if you now loop over these 4 effects you only have syscalls to access information from the Data effect one. So the index at which the TechStatus effect lives will return -1 for all syscalls and should be immediately skipped in the script."
    },
    "kbTechGetEffectType": {
        "name": "kbTechGetEffectType",
        "return_type": "int",
        "params": [
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "effectIndex",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the effect type of the given techID at the given effectIndex. The return values correspond with the cEffectType constants. For anything else than cDataEffect there is no way to get more information sadly."
    },
    "trFormatString": {
        "name": "trFormatString",
        "return_type": "string",
        "params": [
            {
                "name": "format",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "inserts",
                "type": "string[]",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Inserts (loc)strings into (loc)strings."
    },
    "trCounterIncrementManual": {
        "name": "trCounterIncrementManual",
        "return_type": "bool",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "amount",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "increment the current value of the counter."
    },
    "trCounterDecrementManual": {
        "name": "trCounterDecrementManual",
        "return_type": "bool",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "amount",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "decrement the current value of the counter."
    },
    "trCounterSetManual": {
        "name": "trCounterSetManual",
        "return_type": "bool",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "value",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets the current value of the given manual counter."
    },
    "trCounterAddPlayerName": {
        "name": "trCounterAddPlayerName",
        "return_type": "bool",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "message",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "displays a player name as a counter."
    },
    "trCounterSetPlayerName": {
        "name": "trCounterSetPlayerName",
        "return_type": "bool",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "changes the player name to be displayed on a given player name pseudocounter."
    },
    "trCounterAddTime": {
        "name": "trCounterAddTime",
        "return_type": "void",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "start",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "stop",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "message",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "eventID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "start a counter that may or may not fire an event."
    },
    "trCounterTimeSetValue": {
        "name": "trCounterTimeSetValue",
        "return_type": "void",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "value",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "forcibly sets the current value of a given counter."
    },
    "trCounterAddTimeMs": {
        "name": "trCounterAddTimeMs",
        "return_type": "void",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "start",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "stop",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "message",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "eventID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "start a counter that may or may not fire an event."
    },
    "trCounterPause": {
        "name": "trCounterPause",
        "return_type": "void",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "pause",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "pause a counter."
    },
    "trCounterSetVisibility": {
        "name": "trCounterSetVisibility",
        "return_type": "void",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "visible",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "hides or displays a counter."
    },
    "trCounterGetValue": {
        "name": "trCounterGetValue",
        "return_type": "int",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns the current value of the given counter."
    },
    "trCounterAbort": {
        "name": "trCounterAbort",
        "return_type": "void",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "abort a counter."
    },
    "trSetCounterDisplay": {
        "name": "trSetCounterDisplay",
        "return_type": "void",
        "params": [
            {
                "name": "message",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "TODO."
    },
    "trClearCounterDisplay": {
        "name": "trClearCounterDisplay",
        "return_type": "void",
        "params": [],
        "desc": "TODO."
    },
    "trCounterPersistent": {
        "name": "trCounterPersistent",
        "return_type": "void",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "persistent",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "enables or disables persistency for a counter. Persistent counters aren't deleted even after reaching their maximum value."
    },
    "trCounterPlayerSpecific": {
        "name": "trCounterPlayerSpecific",
        "return_type": "void",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerSpecific",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets whether or not a given counter should be restricted to specific players, and, if so, assigns the given player to the counter.."
    },
    "trCounterAddGenericXS": {
        "name": "trCounterAddGenericXS",
        "return_type": "void",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "msg",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "appendMsg",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "xsCall",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "eventID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "initialVal",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "finalVal",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "finalAsMin",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "showFinal",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "reverseCount",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "startAtZero",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "start an XS-based counter, that may or may not fire an event. The name of this counter is also a QV under the hood that can be adjusted at will. If you attached an xsCall to this counter the QV variable will be updated each frame so doing custom things to it won't have an effect."
    },
    "trGamePause": {
        "name": "trGamePause",
        "return_type": "void",
        "params": [
            {
                "name": "pause",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "pause or unpause the game."
    },
    "trDelayedRuleActivation": {
        "name": "trDelayedRuleActivation",
        "return_type": "void",
        "params": [
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "checkForTrigger",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "adds a rule to the runtime to be activated on the next update."
    },
    "trWaypointClear": {
        "name": "trWaypointClear",
        "return_type": "void",
        "params": [],
        "desc": "Clears the waypoints in the trigger selection system."
    },
    "trWaypointAddPoint": {
        "name": "trWaypointAddPoint",
        "return_type": "void",
        "params": [
            {
                "name": "v",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Adds the waypoint into the trigger selection system."
    },
    "trWaypointAddUnitPosition": {
        "name": "trWaypointAddUnitPosition",
        "return_type": "void",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Adds the unit's position as a waypoint in the trigger selection system."
    },
    "trUnitSelectClear": {
        "name": "trUnitSelectClear",
        "return_type": "void",
        "params": [],
        "desc": "Clears the units in the trigger selection system."
    },
    "trUnitSelectByID": {
        "name": "trUnitSelectByID",
        "return_type": "void",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "'Selects' the unit in the trigger selection system."
    },
    "trPlayerControlsSocket": {
        "name": "trPlayerControlsSocket",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if the specified player is built on the specified socket."
    },
    "trObjectGettingWorked": {
        "name": "trObjectGettingWorked",
        "return_type": "bool",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if the object is currently being worked."
    },
    "trUnitMoveToPoint": {
        "name": "trUnitMoveToPoint",
        "return_type": "bool",
        "params": [
            {
                "name": "x",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "y",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "z",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "eventID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "bAttackMove",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "bUnitRun",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "runSpeedMultiplier",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Moves the selected unit(s) to the given position."
    },
    "trUnitMoveToUnit": {
        "name": "trUnitMoveToUnit",
        "return_type": "bool",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "eventID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "bAttackMove",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "bUnitRun",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "runSpeedMultiplier",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Moves the selected unit(s) to the spot occupied by the given unit."
    },
    "trSetRevealerActiveState": {
        "name": "trSetRevealerActiveState",
        "return_type": "void",
        "params": [
            {
                "name": "revealerName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "active",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Finds the specified revealer and sets it to active or inactive."
    },
    "trCreateRevealer": {
        "name": "trCreateRevealer",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "revealerName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "position",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "revealerLOS",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "blackmapOnly",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Creates a revealer with the given attributes."
    },
    "trUnitMoveFromArea": {
        "name": "trUnitMoveFromArea",
        "return_type": "bool",
        "params": [
            {
                "name": "x",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "y",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "z",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "eventID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "bAttackMove",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitType",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "radius",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Moves all matching units near the selected unit(s) to the given position."
    },
    "trUnitBuildUnit": {
        "name": "trUnitBuildUnit",
        "return_type": "bool",
        "params": [
            {
                "name": "protoName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "position",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "forward",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Selects units and makes the build a unit at specified location."
    },
    "trUnitDoWorkOnUnit": {
        "name": "trUnitDoWorkOnUnit",
        "return_type": "bool",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "eventID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Tasks the selected unit(s) to perform work on the given unit."
    },
    "trUnitGarrison": {
        "name": "trUnitGarrison",
        "return_type": "bool",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "eventID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Tasks the selected unit(s) to garrision into another unit."
    },
    "trImmediateUnitGarrison": {
        "name": "trImmediateUnitGarrison",
        "return_type": "bool",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Instantly garrisons units inside another unit without considering distance."
    },
    "trUnitDistanceToPoint": {
        "name": "trUnitDistanceToPoint",
        "return_type": "float",
        "params": [
            {
                "name": "x",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "y",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "z",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the shortest distance between the trRT units and the point."
    },
    "trUnitDistanceToUnitID": {
        "name": "trUnitDistanceToUnitID",
        "return_type": "float",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the shortest distance between the trRT units and the given unit."
    },
    "trUnitRemoveControlAction": {
        "name": "trUnitRemoveControlAction",
        "return_type": "void",
        "params": [],
        "desc": "Removes the current control action so the next thing can take effect immediately."
    },
    "trUnitSetAnimation": {
        "name": "trUnitSetAnimation",
        "return_type": "bool",
        "params": [
            {
                "name": "animName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "versionIndex",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "loop",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "eventID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "destroyOnNextControlAction",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the cinematic animation version for the selected unit(s)."
    },
    "trUnitSetAnimationPath": {
        "name": "trUnitSetAnimationPath",
        "return_type": "bool",
        "params": [
            {
                "name": "animName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "animPath",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "loop",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "eventID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "destroyOnNextControlAction",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the cinematic animation version for the selected unit(s)."
    },
    "trUnitAlive": {
        "name": "trUnitAlive",
        "return_type": "bool",
        "params": [],
        "desc": "Returns true if all selected units are alive."
    },
    "trUnitDead": {
        "name": "trUnitDead",
        "return_type": "bool",
        "params": [],
        "desc": "Returns true if all selected units are dead."
    },
    "trUnitFullyBuilt": {
        "name": "trUnitFullyBuilt",
        "return_type": "bool",
        "params": [],
        "desc": "Returns true if all selected units are fully built."
    },
    "trUnitDelete": {
        "name": "trUnitDelete",
        "return_type": "bool",
        "params": [
            {
                "name": "remove",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "removes or kills the selected unit(s)."
    },
    "trUnitDestroy": {
        "name": "trUnitDestroy",
        "return_type": "bool",
        "params": [
            {
                "name": "ejectContained",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "destroys the selected unit(s)."
    },
    "trUnitCreate": {
        "name": "trUnitCreate",
        "return_type": "int",
        "params": [
            {
                "name": "protoName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "x",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "y",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "z",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "heading",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "skipBirth",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "creates a new unit."
    },
    "trUnitCreateForced": {
        "name": "trUnitCreateForced",
        "return_type": "int",
        "params": [
            {
                "name": "protoName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "x",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "y",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "z",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "heading",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "skipBirth",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "creates a new unit, ignoring placement rules."
    },
    "trRelicCreate": {
        "name": "trRelicCreate",
        "return_type": "bool",
        "params": [
            {
                "name": "x",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "y",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "z",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "heading",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "relicName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "creates a new relic from defined relic name."
    },
    "trRelicForce": {
        "name": "trRelicForce",
        "return_type": "bool",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "relicName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "changes type of selected relic to the given relic name."
    },
    "trUnitGetHeading": {
        "name": "trUnitGetHeading",
        "return_type": "int",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns the units heading."
    },
    "trUnitSetHeading": {
        "name": "trUnitSetHeading",
        "return_type": "bool",
        "params": [
            {
                "name": "degrees",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets the units heading."
    },
    "trUnitGetPosition": {
        "name": "trUnitGetPosition",
        "return_type": "vector",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns the unit's position."
    },
    "trUnitVisibleToPlayer": {
        "name": "trUnitVisibleToPlayer",
        "return_type": "bool",
        "params": [],
        "desc": "returns true if the player can see the selected unit, and it is on screen. Desync sensitive."
    },
    "trUnitHasLOS": {
        "name": "trUnitHasLOS",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns true if the player can see the selected unit, otherwise returns false."
    },
    "trUnitConvert": {
        "name": "trUnitConvert",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "converts the selected units to player."
    },
    "trUnitPercentComplete": {
        "name": "trUnitPercentComplete",
        "return_type": "int",
        "params": [],
        "desc": "returns the percent complete as 0 to 100"
    },
    "trUnitPercentDamaged": {
        "name": "trUnitPercentDamaged",
        "return_type": "float",
        "params": [],
        "desc": "returns the percent damaged as 0 to 100"
    },
    "trUnitTeleport": {
        "name": "trUnitTeleport",
        "return_type": "bool",
        "params": [
            {
                "name": "x",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "y",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "z",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "moves units from current position to position specified"
    },
    "trUnitChangeProtoUnit": {
        "name": "trUnitChangeProtoUnit",
        "return_type": "void",
        "params": [
            {
                "name": "protoName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "skipBirth",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "forceFoundation",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "changes the proto unit for a given set of units."
    },
    "trUnitDelayedTransform": {
        "name": "trUnitDelayedTransform",
        "return_type": "void",
        "params": [],
        "desc": "activates delayed transform (e.g. as used for Roc state change) action within selected units, whenever applicable."
    },
    "trUnitTransformCommand": {
        "name": "trUnitTransformCommand",
        "return_type": "void",
        "params": [],
        "desc": "performs the transformation defined by the unit's transform command (e.g. heroization, etc.) immediately, whenever applicable."
    },
    "trMarketReset": {
        "name": "trMarketReset",
        "return_type": "void",
        "params": [],
        "desc": "Resets Market buy and sell prices to default values."
    },
    "trUnitSetGatherPointPosForPlayer": {
        "name": "trUnitSetGatherPointPosForPlayer",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "xpos",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "ypos",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "zpos",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the gather point of the unit on this position."
    },
    "trBuildingTimeShiftAtPos": {
        "name": "trBuildingTimeShiftAtPos",
        "return_type": "bool",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "posX",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "posY",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "posZ",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "cast timeshift on this unit at this position."
    },
    "trUnitSetGatherPointUnitForPlayer": {
        "name": "trUnitSetGatherPointUnitForPlayer",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "sourceID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "targetID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the gather point of the unit on this unit."
    },
    "trUnitUngarrisonContained": {
        "name": "trUnitUngarrisonContained",
        "return_type": "void",
        "params": [],
        "desc": "ungarrisons all contained units."
    },
    "trUnitGetNumberManuallySelected": {
        "name": "trUnitGetNumberManuallySelected",
        "return_type": "int",
        "params": [],
        "desc": "Fetches number of selected units."
    },
    "trAnythingIsSelected": {
        "name": "trAnythingIsSelected",
        "return_type": "bool",
        "params": [],
        "desc": "returns true if any unit is selected."
    },
    "trUnitIsSelected": {
        "name": "trUnitIsSelected",
        "return_type": "bool",
        "params": [],
        "desc": "returns if the specified unit is selected."
    },
    "trUnitTypeIsSelected": {
        "name": "trUnitTypeIsSelected",
        "return_type": "bool",
        "params": [
            {
                "name": "proto",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "checkIdle",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns if at least one unit of the specified unit type is selected."
    },
    "trUnitTypeIsHovered": {
        "name": "trUnitTypeIsHovered",
        "return_type": "bool",
        "params": [
            {
                "name": "proto",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns if the cursor is hovering over the given unit type."
    },
    "trUnitIsOwnedBy": {
        "name": "trUnitIsOwnedBy",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "determines if the selected units are owned by the player specified."
    },
    "trUnitIsNotOwnedBy": {
        "name": "trUnitIsNotOwnedBy",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "determines if the selected units are not owned by the player specified."
    },
    "trUnitSetStance": {
        "name": "trUnitSetStance",
        "return_type": "void",
        "params": [
            {
                "name": "stance",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "set the stance for the given set of units."
    },
    "trUnitSetScale": {
        "name": "trUnitSetScale",
        "return_type": "void",
        "params": [
            {
                "name": "scaleX",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "scaleY",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "scaleZ",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets the scale for the given set of units."
    },
    "trUnitHighlight": {
        "name": "trUnitHighlight",
        "return_type": "void",
        "params": [
            {
                "name": "duration",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "flash",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "does something to highlight the units selected."
    },
    "trProtoUnitHighlight": {
        "name": "trProtoUnitHighlight",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "duration",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "flash",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "highlights all units belonging to the given protounit for a player."
    },
    "trBuildingIsOnCursor": {
        "name": "trBuildingIsOnCursor",
        "return_type": "bool",
        "params": [
            {
                "name": "proto",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if the proto unit specified is on the cursor and is a building."
    },
    "trPlayerTribute": {
        "name": "trPlayerTribute",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resource",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "amount",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "toPlayerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "tributes resources to a player."
    },
    "trPlayerIsDefeated": {
        "name": "trPlayerIsDefeated",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns true/false if the player has been defeated."
    },
    "trPlayerIsActive": {
        "name": "trPlayerIsActive",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns true/false if the player is active."
    },
    "trPlayerSetDefeated": {
        "name": "trPlayerSetDefeated",
        "return_type": "void",
        "params": [
            {
                "name": "i",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "call this when a player is defeated on the local machine (meaning that this func must be called synchronously on all machines, it will not pass around a command.)"
    },
    "trPlayerSetDiplomacy": {
        "name": "trPlayerSetDiplomacy",
        "return_type": "void",
        "params": [
            {
                "name": "player1",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "player2",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "status",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "mutual",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets the diplomacy status between players."
    },
    "trPlayerGetDiplomacy": {
        "name": "trPlayerGetDiplomacy",
        "return_type": "string",
        "params": [
            {
                "name": "player1",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "player2",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "gets the diplomacy status between players."
    },
    "trPlayerModifyLOS": {
        "name": "trPlayerModifyLOS",
        "return_type": "void",
        "params": [
            {
                "name": "destPlayer",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "canSee",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "srcPlayer",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Adds/removes LOS between players."
    },
    "trPlayerSetActive": {
        "name": "trPlayerSetActive",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets the active player."
    },
    "trObjectiveComplete": {
        "name": "trObjectiveComplete",
        "return_type": "void",
        "params": [
            {
                "name": "objectiveID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "forceComplete",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "playSound",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Completes the specified objective. Forces a reoccurring objective complete if forceComplete is true."
    },
    "trObjectiveHide": {
        "name": "trObjectiveHide",
        "return_type": "void",
        "params": [
            {
                "name": "objectiveID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Hides the specified objective on the UI."
    },
    "trObjectiveShow": {
        "name": "trObjectiveShow",
        "return_type": "void",
        "params": [
            {
                "name": "objectiveID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playSound",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Shows the specified objective on the UI."
    },
    "trPlayerAtPopCap": {
        "name": "trPlayerAtPopCap",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns true if player is at pop cap."
    },
    "trEventSetHandler": {
        "name": "trEventSetHandler",
        "return_type": "bool",
        "params": [
            {
                "name": "eventID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "functionName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets a handler function for an event id."
    },
    "trEventFire": {
        "name": "trEventFire",
        "return_type": "void",
        "params": [
            {
                "name": "eventID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "cause an event to occur."
    },
    "trSetUnitIdleProcessing": {
        "name": "trSetUnitIdleProcessing",
        "return_type": "void",
        "params": [
            {
                "name": "v",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets whether or not units can do their idle processing."
    },
    "trSetObscuredUnits": {
        "name": "trSetObscuredUnits",
        "return_type": "void",
        "params": [
            {
                "name": "v",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets whether or not units can be drawn obscured or not."
    },
    "trSoundPlayFN": {
        "name": "trSoundPlayFN",
        "return_type": "void",
        "params": [
            {
                "name": "filename",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "eventID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "subtitle",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "portrait",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Plays the sound associated with the filename."
    },
    "trSoundPlayPaused": {
        "name": "trSoundPlayPaused",
        "return_type": "void",
        "params": [
            {
                "name": "filename",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "seconds",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "eventID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "subtitle",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "portrait",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Plays the sound associated with the filename."
    },
    "trSoundTimer": {
        "name": "trSoundTimer",
        "return_type": "void",
        "params": [
            {
                "name": "ms",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "eventID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "trSoundTimer(int32 milliseconds, int32 eventID) creates a high performance sound timer and passes the eventID as data."
    },
    "trTechStatusActive": {
        "name": "trTechStatusActive",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns true if tech is active for player."
    },
    "trTechStatusResearching": {
        "name": "trTechStatusResearching",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns true if tech is being researched for player."
    },
    "trTechStatusCheck": {
        "name": "trTechStatusCheck",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "status",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns true if tech's status is techStatus."
    },
    "trPlayerGetVillagerPriority": {
        "name": "trPlayerGetVillagerPriority",
        "return_type": "int",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "gets the villager priority preset for player."
    },
    "trTechSetStatus": {
        "name": "trTechSetStatus",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "status",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets the tech status for the player."
    },
    "trSetFogAndBlackmap": {
        "name": "trSetFogAndBlackmap",
        "return_type": "void",
        "params": [
            {
                "name": "fog",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "black",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "turn fog and black map on/off. (SP modes only)"
    },
    "trArmySelect": {
        "name": "trArmySelect",
        "return_type": "void",
        "params": [
            {
                "name": "parameters",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "selects the units in the army specified."
    },
    "trArmySelectInt": {
        "name": "trArmySelectInt",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "armyID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "selects the units in the army specified."
    },
    "trArmyDispatch": {
        "name": "trArmyDispatch",
        "return_type": "bool",
        "params": [
            {
                "name": "army",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoname",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "count",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "x",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "y",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "z",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "heading",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "clearExisting",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "skipBirth",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "creates the units in the army specified."
    },
    "trFormationScale": {
        "name": "trFormationScale",
        "return_type": "void",
        "params": [
            {
                "name": "scale",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "scales the formation size of formations in the game."
    },
    "trRateConstruction": {
        "name": "trRateConstruction",
        "return_type": "void",
        "params": [
            {
                "name": "rate",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "modify construction rate."
    },
    "trRateTrain": {
        "name": "trRateTrain",
        "return_type": "void",
        "params": [
            {
                "name": "rate",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "modify training rate."
    },
    "trRateResearch": {
        "name": "trRateResearch",
        "return_type": "void",
        "params": [
            {
                "name": "rate",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "modify research rate."
    },
    "trRatesReset": {
        "name": "trRatesReset",
        "return_type": "void",
        "params": [],
        "desc": "Resets all the rates to normal (1.0f)."
    },
    "trMinimapFlare": {
        "name": "trMinimapFlare",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "duration",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "pPosition",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "unused",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sends a Minimap flare to a certain player."
    },
    "trCameraShake": {
        "name": "trCameraShake",
        "return_type": "void",
        "params": [
            {
                "name": "shakeDuration",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "shakeStrength",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Makes the camera shake."
    },
    "trPlayerResetBlackMap": {
        "name": "trPlayerResetBlackMap",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Resets the black map for a given HUMAN player."
    },
    "trPlayerResetBlackMapForAllPlayers": {
        "name": "trPlayerResetBlackMapForAllPlayers",
        "return_type": "void",
        "params": [],
        "desc": "trPlayerResetBlackMapForAllPlayers(Resets the black map for all HUMAN players."
    },
    "trPlayerKillAllBuildings": {
        "name": "trPlayerKillAllBuildings",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Kills all of the buildings of a given player."
    },
    "trPlayerGrantResources": {
        "name": "trPlayerGrantResources",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resource",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "amount",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "advances the campaign."
    },
    "trFakifySelection": {
        "name": "trFakifySelection",
        "return_type": "void",
        "params": [
            {
                "name": "fakePlayerIndex",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the selected unit as having the fake player with the specified index (0-7)"
    },
    "trFakifyArmy": {
        "name": "trFakifyArmy",
        "return_type": "void",
        "params": [
            {
                "name": "armyName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "fakePlayerIndex",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Fakifies the army to the specified fake player index."
    },
    "trDefakifySelection": {
        "name": "trDefakifySelection",
        "return_type": "void",
        "params": [],
        "desc": "Sets the selected unit as not having a fake player."
    },
    "trDefakifyArmy": {
        "name": "trDefakifyArmy",
        "return_type": "void",
        "params": [
            {
                "name": "armyName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Defakifies the army."
    },
    "trFakifySelectionSubModelByOverrideName": {
        "name": "trFakifySelectionSubModelByOverrideName",
        "return_type": "void",
        "params": [
            {
                "name": "submodelOverrideName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "fakePlayerIndex",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets named submodels of the selection to fake player with the specified index (0-7)"
    },
    "trDefakifySelectionSubModels": {
        "name": "trDefakifySelectionSubModels",
        "return_type": "void",
        "params": [],
        "desc": "Resets all submodels back to using the player colour of the parent model."
    },
    "trSelectionGetNumber": {
        "name": "trSelectionGetNumber",
        "return_type": "int",
        "params": [],
        "desc": "Returns how many units you currently have selected."
    },
    "trSelectionGetUnitID": {
        "name": "trSelectionGetUnitID",
        "return_type": "int",
        "params": [
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the ID of the selected unit."
    },
    "trSetPauseOnAgeUpgrade": {
        "name": "trSetPauseOnAgeUpgrade",
        "return_type": "void",
        "params": [
            {
                "name": "val",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "TODO."
    },
    "trSetPauseInObjectiveWindow": {
        "name": "trSetPauseInObjectiveWindow",
        "return_type": "void",
        "params": [
            {
                "name": "val",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "TODO."
    },
    "trRevealEntireMap": {
        "name": "trRevealEntireMap",
        "return_type": "void",
        "params": [],
        "desc": "shows whole map, similar to how revealed mode works (SP modes only)"
    },
    "trDamageUnitPercent": {
        "name": "trDamageUnitPercent",
        "return_type": "void",
        "params": [
            {
                "name": "damagePercent",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "does % percent of a unit's total HP in instant typeless damage."
    },
    "trDamageUnit": {
        "name": "trDamageUnit",
        "return_type": "void",
        "params": [
            {
                "name": "damageAmt",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "does a specific amount of damage to HP in instant typeless damage."
    },
    "trDamageUnitsInArea": {
        "name": "trDamageUnitsInArea",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "range",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "dmg",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "All units within dist of the selected ref object that match type take dmg."
    },
    "trQuestVarSet": {
        "name": "trQuestVarSet",
        "return_type": "void",
        "params": [
            {
                "name": "varName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "val",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets one of the trigger scratch variables"
    },
    "trQuestVarCopy": {
        "name": "trQuestVarCopy",
        "return_type": "void",
        "params": [
            {
                "name": "destName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "fromName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "copies value of one of the trigger scratch variables"
    },
    "trQuestVarSetFromRand": {
        "name": "trQuestVarSetFromRand",
        "return_type": "void",
        "params": [
            {
                "name": "varName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "minVal",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "maxVal",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "round",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets one of the trigger scratch variables within a random range"
    },
    "trQuestVarSetFromRandUnique": {
        "name": "trQuestVarSetFromRandUnique",
        "return_type": "void",
        "params": [
            {
                "name": "varName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "minVal",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "maxVal",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "round",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets one of the trigger scratch variables within a random range, while avoiding repeating consecutive values"
    },
    "trQuestVarGet": {
        "name": "trQuestVarGet",
        "return_type": "float",
        "params": [
            {
                "name": "varName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "retrieve value of a trigger scratch variable, returns zero if unset"
    },
    "trQuestVarEcho": {
        "name": "trQuestVarEcho",
        "return_type": "void",
        "params": [
            {
                "name": "varName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "chats out the value of one of the trigger scratch variables"
    },
    "trUnitFaceUnit": {
        "name": "trUnitFaceUnit",
        "return_type": "bool",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "eventID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Moves the selected unit(s) to face the given unit."
    },
    "trLetterBox": {
        "name": "trLetterBox",
        "return_type": "void",
        "params": [
            {
                "name": "on",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "letterbox",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Turns letter box mode on or off. Letterbox toggles the black border around the screen while in cinematic mode."
    },
    "trCameraTrackLoad": {
        "name": "trCameraTrackLoad",
        "return_type": "void",
        "params": [
            {
                "name": "szName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Loads a camera track."
    },
    "trCameraTrackPlay": {
        "name": "trCameraTrackPlay",
        "return_type": "void",
        "params": [
            {
                "name": "fDuration",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "eventID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "blendWithGameCamera",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "blendDurationMS",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "plays the current camera track, if blend with game camera is true, it will best fit the strategy camera location at the last waypoint and smooth transition to it."
    },
    "trCinematicIsAborted": {
        "name": "trCinematicIsAborted",
        "return_type": "bool",
        "params": [],
        "desc": "returns the abort cinematic status."
    },
    "trCinematicDoAbort": {
        "name": "trCinematicDoAbort",
        "return_type": "void",
        "params": [],
        "desc": "aborts the cinematic."
    },
    "trCameraTrackPlayPlayer": {
        "name": "trCameraTrackPlayPlayer",
        "return_type": "void",
        "params": [
            {
                "name": "camTrackName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "blendWithGameCamera",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "blendDurationMS",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "loads and plays a camera track for a given player, if blend with game camera is true, it will best fit the strategy camera location at the last waypoint and smooth transition to it."
    },
    "trCameraCutPlayer": {
        "name": "trCameraCutPlayer",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "pos",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "dir",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "up",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "right",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "puts the camera in the specified location for the given player."
    },
    "trCameraCut": {
        "name": "trCameraCut",
        "return_type": "void",
        "params": [
            {
                "name": "pos",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "dir",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "up",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "right",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "puts the camera in the specified location."
    },
    "trCameraLockOnUnit": {
        "name": "trCameraLockOnUnit",
        "return_type": "void",
        "params": [
            {
                "name": "bEnable",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "timer",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "eventID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Orients the camera to the selected unit, and keeps it locked on that unit."
    },
    "trCameraPanWithUnit": {
        "name": "trCameraPanWithUnit",
        "return_type": "void",
        "params": [
            {
                "name": "bEnable",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "eventID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Moves the camera in the same direction that a particular unit moves."
    },
    "trCameraLock": {
        "name": "trCameraLock",
        "return_type": "void",
        "params": [
            {
                "name": "lock",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Toggles camera movement locking over the current position."
    },
    "trSetLighting": {
        "name": "trSetLighting",
        "return_type": "void",
        "params": [
            {
                "name": "setName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "fadeTime",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "fades to the specified lighting set over fadetime."
    },
    "trDisableTrigger": {
        "name": "trDisableTrigger",
        "return_type": "void",
        "params": [
            {
                "name": "eventID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Disables (sets active = false) the trigger specified by the given eventID."
    },
    "trUnitMakeInvulnerable": {
        "name": "trUnitMakeInvulnerable",
        "return_type": "void",
        "params": [
            {
                "name": "bEnable",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Makes a unit invulnerable to damage. Turn it off to return the unit to normal."
    },
    "trKillAIPlan": {
        "name": "trKillAIPlan",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "planName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "No help."
    },
    "trAISetAttackResponseDistance": {
        "name": "trAISetAttackResponseDistance",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "AttackResponseDistance",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the attack response distance for the provided playerID's AI if it has one. This distance controls from what within distance the AI will call other units to help if one of its units gets attacked."
    },
    "trAddArmyToPlan": {
        "name": "trAddArmyToPlan",
        "return_type": "void",
        "params": [
            {
                "name": "armyName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "planName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Adds the units in the specified army to the specified plan."
    },
    "trSetShadowFarClip": {
        "name": "trSetShadowFarClip",
        "return_type": "void",
        "params": [
            {
                "name": "enabled",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "distance",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Enable or disables the shadow far clippping plane."
    },
    "trPlayerOverrideArtCulture": {
        "name": "trPlayerOverrideArtCulture",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "culture",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Overrides the culture used for choosing the player's art."
    },
    "trPlayerRemoveAllUnits": {
        "name": "trPlayerRemoveAllUnits",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Removes all of the units of a given player without affecting Player Stats."
    },
    "trObjectiveIncomplete": {
        "name": "trObjectiveIncomplete",
        "return_type": "void",
        "params": [
            {
                "name": "objectiveID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playSound",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Marks a specified objective as incomplete."
    },
    "trDisableUnitDeletion": {
        "name": "trDisableUnitDeletion",
        "return_type": "void",
        "params": [
            {
                "name": "disable",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets whether or not unit and building deletion should be disabled for this scenario."
    },
    "trDisablePopCapNotifications": {
        "name": "trDisablePopCapNotifications",
        "return_type": "void",
        "params": [
            {
                "name": "disable",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets whether or not persistent popcap notifications should be disabled for this scenario."
    },
    "trDisableNotificationSounds": {
        "name": "trDisableNotificationSounds",
        "return_type": "void",
        "params": [
            {
                "name": "disable",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets whether or not notification sounds should be disabled for this scenario."
    },
    "trDisablePowerNotifications": {
        "name": "trDisablePowerNotifications",
        "return_type": "void",
        "params": [
            {
                "name": "disable",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets whether or not power casting notifications should be disabled for this scenario."
    },
    "trDisablePowerTimers": {
        "name": "trDisablePowerTimers",
        "return_type": "void",
        "params": [
            {
                "name": "disable",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets whether or not displaying timers for active powers should be disabled for this scenario."
    },
    "trEnforceAIAssist": {
        "name": "trEnforceAIAssist",
        "return_type": "void",
        "params": [
            {
                "name": "enable",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets whether or not AI assist support should be enforced for this scenario."
    },
    "trDisableConquestCheck": {
        "name": "trDisableConquestCheck",
        "return_type": "void",
        "params": [
            {
                "name": "disable",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "temporarily disables or re-enables conquest victory check in a scenario that supports it."
    },
    "trConvertUnitsInArea": {
        "name": "trConvertUnitsInArea",
        "return_type": "void",
        "params": [
            {
                "name": "srcPlayer",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "trgPlayer",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "range",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "All units within dist of the selected ref object that match type are converted to the target player."
    },
    "trKillUnitsInArea": {
        "name": "trKillUnitsInArea",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "range",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "All units within dist of the selected ref object that match type are killed."
    },
    "trRemoveUnitsInArea": {
        "name": "trRemoveUnitsInArea",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "range",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "ejectContained",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "All units within dist of the selected ref object that match type are killed."
    },
    "trPlayerOverrideCivName": {
        "name": "trPlayerOverrideCivName",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Overrides the string used for the displayed civilization name."
    },
    "trProtoUnitActionSetEnabled": {
        "name": "trProtoUnitActionSetEnabled",
        "return_type": "void",
        "params": [
            {
                "name": "protoUnitName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "actionName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "enable",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "enables or disables an action for a proto unit."
    },
    "trProtoUnitChangeName": {
        "name": "trProtoUnitChangeName",
        "return_type": "void",
        "params": [
            {
                "name": "protoUnitName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "nameStr",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "rolloverStr",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "shortRolloverStr",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Modify the name and rollover text of a proto unit."
    },
    "trProtoUnitSetIcon": {
        "name": "trProtoUnitSetIcon",
        "return_type": "void",
        "params": [
            {
                "name": "protoUnitName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "iconPath",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "minimapIconPath",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Modify the icon of a proto unit."
    },
    "trArmyUnitChangeName": {
        "name": "trArmyUnitChangeName",
        "return_type": "void",
        "params": [
            {
                "name": "newName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoUnitName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "set an override name for a specific unit in an army"
    },
    "trPlayerGetType": {
        "name": "trPlayerGetType",
        "return_type": "int",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns whether the given player is a human or a computer/AI player."
    },
    "trUnitHasTarget": {
        "name": "trUnitHasTarget",
        "return_type": "bool",
        "params": [
            {
                "name": "actionOnly",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if all selected units have an attack target or are attacking."
    },
    "trUnitGetTargetID": {
        "name": "trUnitGetTargetID",
        "return_type": "int",
        "params": [
            {
                "name": "srcUnit",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "actionOnly",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the attack target for the given unit."
    },
    "trUnitIsAttacking": {
        "name": "trUnitIsAttacking",
        "return_type": "bool",
        "params": [],
        "desc": "Returns true if all selected units are attacking."
    },
    "trUnitSetPassiveMode": {
        "name": "trUnitSetPassiveMode",
        "return_type": "bool",
        "params": [
            {
                "name": "enable",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "enables or disables Passive Mode for selected Units."
    },
    "trUnitTeleportToUnit": {
        "name": "trUnitTeleportToUnit",
        "return_type": "bool",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Teleport the selected unit(s) to the spot occupied by the given unit."
    },
    "trHealUnit": {
        "name": "trHealUnit",
        "return_type": "void",
        "params": [
            {
                "name": "healAmt",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "adjust the units' hitpoints by the given value."
    },
    "trHealUnitPercent": {
        "name": "trHealUnitPercent",
        "return_type": "void",
        "params": [
            {
                "name": "healPercent",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "heals the selected units by a percentage of their total HP."
    },
    "trHealUnitsInArea": {
        "name": "trHealUnitsInArea",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "range",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "healAmt",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "All units within dist of the selected ref object have their HPs adjusted by the given value."
    },
    "trModifyProtounitAction": {
        "name": "trModifyProtounitAction",
        "return_type": "void",
        "params": [
            {
                "name": "unitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoUnitActionName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "puField",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "delta",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "puRelativity",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "modifies proto unit action data for this scenario only."
    },
    "trModifyProtounitData": {
        "name": "trModifyProtounitData",
        "return_type": "void",
        "params": [
            {
                "name": "unitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "puField",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "delta",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "puRelativity",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "modifies proto unit data for this scenario only."
    },
    "trModifyProtounitResource": {
        "name": "trModifyProtounitResource",
        "return_type": "void",
        "params": [
            {
                "name": "unitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "resource",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "puField",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "delta",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "puRelativity",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "modifies proto unit data taking a resource parameter for this scenario only."
    },
    "trModifyProtounitActionUnitType": {
        "name": "trModifyProtounitActionUnitType",
        "return_type": "void",
        "params": [
            {
                "name": "unitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "actionName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitType",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "puField",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "delta",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "puRelativity",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "modifies proto unit action data taking a unittype parameter for this scenario only."
    },
    "trProtounitActionSpecialEffect": {
        "name": "trProtounitActionSpecialEffect",
        "return_type": "void",
        "params": [
            {
                "name": "unitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoUnitActionName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "effectTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "targetType",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "dmgType",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "duration",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "value",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "modifies proto unit action data by adding a new or adjusting an existing onHitEffect for this scenario only."
    },
    "trProtounitActionSpecialEffectProtoUnit": {
        "name": "trProtounitActionSpecialEffectProtoUnit",
        "return_type": "void",
        "params": [
            {
                "name": "unitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoUnitActionName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "effectTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "targetType",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoUnit",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "duration",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "value",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "modifies proto unit action data by adding a new or adjusting an existing onHitEffect taking a protoUnit parameter for this scenario only."
    },
    "trProtounitActionSpecialEffectDuration": {
        "name": "trProtounitActionSpecialEffectDuration",
        "return_type": "void",
        "params": [
            {
                "name": "unitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoUnitActionName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "effectTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "targetType",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "dmgType",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "delta",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "puRelativity",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "modifies the duration of an existing onHitEffect within the given protoAction for this scenario only."
    },
    "trProtounitActionSpecialEffectModifier": {
        "name": "trProtounitActionSpecialEffectModifier",
        "return_type": "void",
        "params": [
            {
                "name": "unitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoUnitActionName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "effectTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "targetType",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "value",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "modifyType",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "dmgType",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "modifies proto unit action data by adding a new or adjusting an existing onHitEffect and assigning a new stat modifier to it for this scenario only."
    },
    "trProtounitActionSpecialEffectActive": {
        "name": "trProtounitActionSpecialEffectActive",
        "return_type": "void",
        "params": [
            {
                "name": "unitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoUnitActionName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "effectTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "targetType",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "dmgType",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "active",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "modifies proto unit action data by setting a specified existing onHitEffect as active or inactive."
    },
    "trProtoUnitMovementType": {
        "name": "trProtoUnitMovementType",
        "return_type": "void",
        "params": [
            {
                "name": "unitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "movementType",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "modifies proto unit movement type for this scenario only."
    },
    "trProtounitAddTrain": {
        "name": "trProtounitAddTrain",
        "return_type": "void",
        "params": [
            {
                "name": "protoUnitName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "trainPUName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "row",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "column",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "assigns a train entry towards the given protoUnit for this scenario only."
    },
    "trProtounitAddTech": {
        "name": "trProtounitAddTech",
        "return_type": "void",
        "params": [
            {
                "name": "protoUnitName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "row",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "column",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "assigns a tech entry towards the given protoUnit for this scenario only."
    },
    "trProtounitAddCommand": {
        "name": "trProtounitAddCommand",
        "return_type": "void",
        "params": [
            {
                "name": "protoUnitName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "puCmdName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "row",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "column",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "assigns a protoUnitCommand entry towards the given protoUnit for this scenario only."
    },
    "trProtounitRemoveTrain": {
        "name": "trProtounitRemoveTrain",
        "return_type": "void",
        "params": [
            {
                "name": "protoUnitName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "trainPUName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "removes a train entry from the given protoUnit for this scenario only."
    },
    "trProtounitRemoveTech": {
        "name": "trProtounitRemoveTech",
        "return_type": "void",
        "params": [
            {
                "name": "protoUnitName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "removes a tech entry from the given protoUnit for this scenario only."
    },
    "trProtounitRemoveCommand": {
        "name": "trProtounitRemoveCommand",
        "return_type": "void",
        "params": [
            {
                "name": "protoUnitName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "puCmdName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "removes a protoUnitCommand entry from the given protoUnit for this scenario only."
    },
    "trTechModifyResearchPoints": {
        "name": "trTechModifyResearchPoints",
        "return_type": "void",
        "params": [
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "delta",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "techRelativity",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "modifies the reseach points of the given technology for this scenario only."
    },
    "trTechModifyCost": {
        "name": "trTechModifyCost",
        "return_type": "void",
        "params": [
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "delta",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "techRelativity",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "modifies the cost of the given technology for this scenario only."
    },
    "trTechSetStringID": {
        "name": "trTechSetStringID",
        "return_type": "void",
        "params": [
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "stringID",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "techStringFieldIdx",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets a given string field of a technology to the given string ID for this scenario only."
    },
    "trTechReplaceIconByTech": {
        "name": "trTechReplaceIconByTech",
        "return_type": "void",
        "params": [
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "iconTechID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "replaces the icon of a technology for this scenario only."
    },
    "trTechSetIconPath": {
        "name": "trTechSetIconPath",
        "return_type": "void",
        "params": [
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "iconPath",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "replaces the icon of a technology for this scenario only."
    },
    "trTechHideEffects": {
        "name": "trTechHideEffects",
        "return_type": "void",
        "params": [
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "hide",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets whether or not effects should be hidden in the rollover for the given technology for this scenario only."
    },
    "trPlayerIsDefeatedOrResigned": {
        "name": "trPlayerIsDefeatedOrResigned",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns true/false if the player has resigned or has been defeated."
    },
    "trPlayerGetCivilization": {
        "name": "trPlayerGetCivilization",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "civilization",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns true/false if the player civilization matches the given parameter."
    },
    "trHealUnitsPercentInArea": {
        "name": "trHealUnitsPercentInArea",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "range",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "healPercent",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "All units within dist of the selected ref object have their HPs adjusted by the given factor."
    },
    "trDamageUnitsPercentInArea": {
        "name": "trDamageUnitsPercentInArea",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "range",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "dmgPercent",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "All units within dist of the selected ref object are damaged by the given factor."
    },
    "trSocketIsEmpty": {
        "name": "trSocketIsEmpty",
        "return_type": "bool",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if there isn't a fully-built building occupying the specified socket."
    },
    "trUnitCreateFromSource": {
        "name": "trUnitCreateFromSource",
        "return_type": "bool",
        "params": [
            {
                "name": "protoName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "srcUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "trgUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "creates a new unit."
    },
    "trUnitSetConvertible": {
        "name": "trUnitSetConvertible",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "forbid",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets forbid conversion accordingly for the selected units towards the given player."
    },
    "trSocketBuild": {
        "name": "trSocketBuild",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "socketID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Auto-constructs a building over a given socket unit."
    },
    "trPlayerModifyData": {
        "name": "trPlayerModifyData",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "dataField",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "attribute",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "delta",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "puRelativity",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "modifies player data for this scenario only."
    },
    "trPlayerTimeshiftModifyCost": {
        "name": "trPlayerTimeshiftModifyCost",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "delta",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "relativity",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "modifies timeshifting cost ratio for a given protoUnit for this scenario only."
    },
    "trPlayerTimeshiftAddEntry": {
        "name": "trPlayerTimeshiftAddEntry",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "costRatio",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "timeRatio",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "adds a timeshifting entry towards the given protoUnit to a player for this scenario only."
    },
    "trPlayerModifyResourceData": {
        "name": "trPlayerModifyResourceData",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "dataField",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "delta",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "puRelativity",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "modifies player data for this scenario only."
    },
    "trUnitCreateFromSourceMulti": {
        "name": "trUnitCreateFromSourceMulti",
        "return_type": "bool",
        "params": [
            {
                "name": "protoName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "srcUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "trgUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "count",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "creates multiple units from a source object."
    },
    "trObjectiveFailed": {
        "name": "trObjectiveFailed",
        "return_type": "void",
        "params": [
            {
                "name": "objectiveID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playSound",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the specified objective as failed."
    },
    "trObjectiveCreateMarker": {
        "name": "trObjectiveCreateMarker",
        "return_type": "void",
        "params": [
            {
                "name": "objectiveID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "markerPos",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Instantiates an objective marker and binds it to the given objective."
    },
    "trObjectiveRemoveMarker": {
        "name": "trObjectiveRemoveMarker",
        "return_type": "void",
        "params": [
            {
                "name": "objectiveID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Removes the specified objective marker from the given objective."
    },
    "trForceShowObjectivePanel": {
        "name": "trForceShowObjectivePanel",
        "return_type": "void",
        "params": [
            {
                "name": "value",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Forces the objective panel to always display."
    },
    "trCameraStateView": {
        "name": "trCameraStateView",
        "return_type": "void",
        "params": [
            {
                "name": "id",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "puts the camera in the location of a saved camera state, for the given player, or for all players, if no player is set."
    },
    "trExecuteOnAI": {
        "name": "trExecuteOnAI",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "command",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Executes a command on the AI player."
    },
    "trTechRemove": {
        "name": "trTechRemove",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoUnitName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "disables the given tech for the player, and removes it from the UI of the given protoUnit."
    },
    "trGodPowerGrant": {
        "name": "trGodPowerGrant",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoPowerName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "numUses",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "cooldown",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "useCost",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "repeatAtEnd",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "grants X uses of the specified God Power to the player."
    },
    "trGodPowerGrantAtSlot": {
        "name": "trGodPowerGrantAtSlot",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoPowerName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "numUses",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "position",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "cooldown",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "useCost",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "repeatAtEnd",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "grants X uses of the specified god power in a specific God Power UI slot."
    },
    "trGodPowerPrePurchase": {
        "name": "trGodPowerPrePurchase",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoPowerName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "numUses",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "pre-purchases X uses of the specified God Power to the player, if applicable."
    },
    "trGodPowerInvoke": {
        "name": "trGodPowerInvoke",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoPowerName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "pos1",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "pos2",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "ignoreCooldown",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "setAsQueued",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "invokes the specified God Power."
    },
    "trPlayerKillAllGodPowers": {
        "name": "trPlayerKillAllGodPowers",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Kills all of the current God Powers of a player."
    },
    "trPlayerTechTreeEnabledGodPowers": {
        "name": "trPlayerTechTreeEnabledGodPowers",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "bEnable",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Enables/Disables the Tech Tree from granting God Powers to a player. Default=ON."
    },
    "trGodPowerEnableBlocking": {
        "name": "trGodPowerEnableBlocking",
        "return_type": "void",
        "params": [
            {
                "name": "enable",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets whether or not God Power blocking is enabled. Default=ON."
    },
    "trGodPowerSetCost": {
        "name": "trGodPowerSetCost",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoPowerName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "cost",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "repeatCost",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets the cost of the specified God Power for the given player."
    },
    "trGodPowerSetUseCount": {
        "name": "trGodPowerSetUseCount",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoPowerName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "numUses",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets the number of charges of the specified God Power for the given player."
    },
    "trGodPowerSetUsedTimes": {
        "name": "trGodPowerSetUsedTimes",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoPowerName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "numUsedTimes",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "overrides the number of timesthe specified God Power has been used."
    },
    "trGodPowerSetCooldown": {
        "name": "trGodPowerSetCooldown",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoPowerName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "cooldown",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets the cooldown of the specified God Power for the given player."
    },
    "trGodPowerRedefine": {
        "name": "trGodPowerRedefine",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoPowerName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "iconPath",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "displayName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "rollover",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "replaces the icon, and display name and rollover strings of a power for the given player."
    },
    "trUnitPlayerFakifyInArea": {
        "name": "trUnitPlayerFakifyInArea",
        "return_type": "void",
        "params": [
            {
                "name": "fakePlayerIndex",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "srcPlayerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "range",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets all units within dist of the selected ref object as having the fake player with the specified index (0-7)."
    },
    "trUnitMoveFromAreaToUnit": {
        "name": "trUnitMoveFromAreaToUnit",
        "return_type": "bool",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "bAttackMove",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitType",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "radius",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Moves all matching units near the selected unit(s) to the given target unit."
    },
    "trPlayerSetName": {
        "name": "trPlayerSetName",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "name",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the displayed name for the given player."
    },
    "trPlayerSetColor": {
        "name": "trPlayerSetColor",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerColorID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "r",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "g",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "b",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the player color for the given player."
    },
    "trPlaceFoundation": {
        "name": "trPlaceFoundation",
        "return_type": "int",
        "params": [
            {
                "name": "protoName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "x",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "y",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "z",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "heading",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "pctComplete",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "places a foundation for the given building and returns the ID of the foundation."
    },
    "trSocketPlaceFoundation": {
        "name": "trSocketPlaceFoundation",
        "return_type": "int",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "socketID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Places a foundation into this socket unit."
    },
    "trUnitPatrolToPoint": {
        "name": "trUnitPatrolToPoint",
        "return_type": "bool",
        "params": [
            {
                "name": "x",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "y",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "z",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "bUnitRun",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "runSpeedMultiplier",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Moves the selected unit(s) to the given position."
    },
    "trGodPowerInvokeAtArmy": {
        "name": "trGodPowerInvokeAtArmy",
        "return_type": "bool",
        "params": [
            {
                "name": "powerPlayerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "army",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoPowerName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "ignoreCooldown",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "setAsQueued",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "invokes the specified God Power at the specified army."
    },
    "trGodPowerCancelAll": {
        "name": "trGodPowerCancelAll",
        "return_type": "void",
        "params": [],
        "desc": "cancels all active god powers."
    },
    "trUnitSetHitpoints": {
        "name": "trUnitSetHitpoints",
        "return_type": "void",
        "params": [
            {
                "name": "value",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "set the units' hitpoints to the given value, respecting maximum hitpoints."
    },
    "trArmyDispatchAtUnit": {
        "name": "trArmyDispatchAtUnit",
        "return_type": "bool",
        "params": [
            {
                "name": "army",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoname",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "count",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "trgUnitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "heading",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "clearExisting",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "skipBirth",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "creates the units in the army specified at the location of the target unit."
    },
    "trArmyDoWorkOnArmy": {
        "name": "trArmyDoWorkOnArmy",
        "return_type": "bool",
        "params": [
            {
                "name": "srcArmy",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "trgArmy",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "eventID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Tasks the selected army to perform work on the first valid unit within the given arny."
    },
    "trPlayerAllowStartingUnitsSpawning": {
        "name": "trPlayerAllowStartingUnitsSpawning",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "allowSpawning",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets whether or not starting units will be spawned for the given player."
    },
    "trPlayerAllowAgeUpSpawning": {
        "name": "trPlayerAllowAgeUpSpawning",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "allowSpawning",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets whether or not units will be spawned through age-up techs."
    },
    "trPlayerAllowShades": {
        "name": "trPlayerAllowShades",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "allow",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets whether or not the given player will be allowed to spawn shades."
    },
    "trPlayerEnablePartisans": {
        "name": "trPlayerEnablePartisans",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "allow",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets whether or not partisan spawning will be enabled for the given player."
    },
    "trPlayerEnableTimeshift": {
        "name": "trPlayerEnableTimeshift",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "allow",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets whether or not timeshifting will be enabled for the given player."
    },
    "trProtoUnitSetUnitType": {
        "name": "trProtoUnitSetUnitType",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "srcUnitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "set",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets or unsets the given unit type within the given protounit."
    },
    "trProtoUnitSetFlag": {
        "name": "trProtoUnitSetFlag",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoFlagName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "set",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets or unsets the given flag within the given protounit."
    },
    "trTownBellUnrung": {
        "name": "trTownBellUnrung",
        "return_type": "bool",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns true if town bell has been recently unrung on the given unit."
    },
    "trTownBellRung": {
        "name": "trTownBellRung",
        "return_type": "bool",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns true if town bell has been recently rung on the given unit."
    },
    "trArmyClear": {
        "name": "trArmyClear",
        "return_type": "void",
        "params": [
            {
                "name": "army",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Clears the given army, removing all unit IDs from army data."
    },
    "trUnitInLush": {
        "name": "trUnitInLush",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if all selected units are within terrain lush belonging to the given player."
    },
    "trGenerateLush": {
        "name": "trGenerateLush",
        "return_type": "void",
        "params": [],
        "desc": "Generates lush for all selected buildings, if owning player supports lush generation."
    },
    "trQueueStartingUnits": {
        "name": "trQueueStartingUnits",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Queues starting units for player if they have a starting TC."
    },
    "trChangeProtoUnitInArea": {
        "name": "trChangeProtoUnitInArea",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "range",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "dstProtoName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "skipBirth",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "All units within dist of the selected ref object are changed into the given protoUnit."
    },
    "trUnitCancelAllQueued": {
        "name": "trUnitCancelAllQueued",
        "return_type": "void",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Cancels all queued items for the unit."
    },
    "trUnitReveal": {
        "name": "trUnitReveal",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "reveal",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Reveals the currently selected units to the given player."
    },
    "trUnitSetVeterancyRank": {
        "name": "trUnitSetVeterancyRank",
        "return_type": "void",
        "params": [
            {
                "name": "rankID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the veterancy level for the selected units to the given rank, whenever applicable."
    },
    "trUnitImmobilized": {
        "name": "trUnitImmobilized",
        "return_type": "bool",
        "params": [],
        "desc": "Returns true if all selected units are immobilized by a Freeze Action."
    },
    "trGetWorldDifficulty": {
        "name": "trGetWorldDifficulty",
        "return_type": "int",
        "params": [],
        "desc": "Returns the world difficulty."
    },
    "trUnitModifyResourceInventory": {
        "name": "trUnitModifyResourceInventory",
        "return_type": "void",
        "params": [
            {
                "name": "resourceID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "delta",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "puRelativity",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "modifies resource inventory for the selected units."
    },
    "trUnitAddModifier": {
        "name": "trUnitAddModifier",
        "return_type": "void",
        "params": [
            {
                "name": "modifyType",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "dmgType",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "amount",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "duration",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "adds modifier for given modify type and parameter, when applicable, to selected units."
    },
    "trUnitAdjustModifier": {
        "name": "trUnitAdjustModifier",
        "return_type": "void",
        "params": [
            {
                "name": "modifyType",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "dmgType",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "delta",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "relativityIdx",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "adjust existing modifier for given modify type and parameter, when applicable, to selected units."
    },
    "trUnitSetShading": {
        "name": "trUnitSetShading",
        "return_type": "void",
        "params": [
            {
                "name": "shadingType",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "opacity",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "assign the given shading type with the set opacity to the selected units."
    },
    "trUnitSetOrientationForward": {
        "name": "trUnitSetOrientationForward",
        "return_type": "bool",
        "params": [
            {
                "name": "degrees",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "disableTie",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets the orientation for the forward vector for the selected units."
    },
    "trUnitSetOrientationUp": {
        "name": "trUnitSetOrientationUp",
        "return_type": "bool",
        "params": [
            {
                "name": "degrees",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "disableTie",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets the orientation for the up vector for the selected units."
    },
    "trUnitSetOrientationRight": {
        "name": "trUnitSetOrientationRight",
        "return_type": "bool",
        "params": [
            {
                "name": "degrees",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "disableTie",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets the orientation for the right vector for the selected units."
    },
    "trUnitReposition": {
        "name": "trUnitReposition",
        "return_type": "bool",
        "params": [
            {
                "name": "x",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "y",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "z",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "disableTie",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "immediate",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets the position for the selected units to the given absolute coordinates."
    },
    "trUnitRepositionToUnit": {
        "name": "trUnitRepositionToUnit",
        "return_type": "bool",
        "params": [
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "disableTie",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "immediate",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets the position for the selected units to the coordinates of the given unit."
    },
    "trUnitSetVariation": {
        "name": "trUnitSetVariation",
        "return_type": "bool",
        "params": [
            {
                "name": "variation",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets the variation for the selected units to the given value."
    },
    "trUnitMutate": {
        "name": "trUnitMutate",
        "return_type": "void",
        "params": [
            {
                "name": "protoName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "fullHitpoints",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "transforms selected units into the given protoUnit through PU mutation, maintaining original BUnit pointer."
    },
    "trUnitPerformAction": {
        "name": "trUnitPerformAction",
        "return_type": "void",
        "params": [
            {
                "name": "actionName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "targetID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "targetPos",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "bypassCharge",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "performs a given protoAction through the selected units."
    },
    "trUnitApplyEffect": {
        "name": "trUnitApplyEffect",
        "return_type": "void",
        "params": [
            {
                "name": "effectID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "duration",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "applys a given effect towards the selected units."
    },
    "trUnitApplyEffectDamage": {
        "name": "trUnitApplyEffectDamage",
        "return_type": "void",
        "params": [
            {
                "name": "effectID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "duration",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "damage",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "dmgType",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "applys a given effect with a damage value towards the selected units."
    },
    "trUnitApplyEffectProtoUnit": {
        "name": "trUnitApplyEffectProtoUnit",
        "return_type": "void",
        "params": [
            {
                "name": "effectID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "duration",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "applys a given effect towards the selected units."
    },
    "trUnitThrow": {
        "name": "trUnitThrow",
        "return_type": "void",
        "params": [
            {
                "name": "direction",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "distance",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "numBounces",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "maxHeight",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "maxVelocity",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "spinPeriod",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Throws the selected units with the provided parameters."
    },
    "trMapMutateUnits": {
        "name": "trMapMutateUnits",
        "return_type": "void",
        "params": [
            {
                "name": "srcUnitType",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "trgProtoName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "fullHitpoints",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "transforms all units on the map belonging to the given unit type into the set protoUnit through PU mutation, maintaining original BUnit pointer."
    },
    "trPlayerMutateUnits": {
        "name": "trPlayerMutateUnits",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "srcUnitType",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "trgProtoName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "fullHitpoints",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "transforms all units for a player belonging to the given unit type into the set protoUnit through PU mutation, maintaining original BUnit pointer."
    },
    "trPlayerChangeProtoUnit": {
        "name": "trPlayerChangeProtoUnit",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "srcUnitType",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "trgProtoName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "skipBirth",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "forceFoundation",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "transforms all units for a player belonging to the given unit type into the set protoUnit. Does not use PU mutation, and does not maintain original BUnit data."
    },
    "trPaintTerrain": {
        "name": "trPaintTerrain",
        "return_type": "void",
        "params": [
            {
                "name": "terrainType",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "terrainSubtype",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "minX",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "minZ",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "maxX",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "maxZ",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "updateObstructions",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "paints a rectangular area by the given terrain type and subtype."
    },
    "trPaintTerrainBySubtypeName": {
        "name": "trPaintTerrainBySubtypeName",
        "return_type": "void",
        "params": [
            {
                "name": "subTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "x0",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "z0",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "x1",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "z1",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "updateObstructions",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "paints a rectangular area by the terrain identified by the given terrain subtype UI name."
    },
    "trPaintTerrainCircular": {
        "name": "trPaintTerrainCircular",
        "return_type": "void",
        "params": [
            {
                "name": "terrainType",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "terrainSubtype",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "center",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "radius",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "updateObstructions",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "paints a circular area by the given terrain type and subtype."
    },
    "trPaintTerrainCircularBySubtypeName": {
        "name": "trPaintTerrainCircularBySubtypeName",
        "return_type": "void",
        "params": [
            {
                "name": "subTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "center",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "radius",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "updateObstructions",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "paints a circular area by the terrain identified by the given terrain subtype UI name."
    },
    "trPaintWater": {
        "name": "trPaintWater",
        "return_type": "void",
        "params": [
            {
                "name": "waterID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "minX",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "minZ",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "maxX",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "maxZ",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "circular",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "updateObstructions",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "paints an area by the water entry identified by the given ID."
    },
    "trPaintWaterRectangular": {
        "name": "trPaintWaterRectangular",
        "return_type": "void",
        "params": [
            {
                "name": "waterName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "x0",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "z0",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "x1",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "z1",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "updateObstructions",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "paints a rectangular area by the water entry identified by the given name."
    },
    "trPaintWaterCircular": {
        "name": "trPaintWaterCircular",
        "return_type": "void",
        "params": [
            {
                "name": "waterName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "center",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "radius",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "updateObstructions",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "paints a circular area by the water entry identified by the given name."
    },
    "trChangeTerrainHeight": {
        "name": "trChangeTerrainHeight",
        "return_type": "void",
        "params": [
            {
                "name": "x0",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "z0",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "x1",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "z1",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "height",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "removeWater",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets the terrain elevation for the provided rectangular region."
    },
    "trChangeTerrainHeightCircular": {
        "name": "trChangeTerrainHeightCircular",
        "return_type": "void",
        "params": [
            {
                "name": "center",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "radius",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "height",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "removeWater",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets the terrain elevation for the provided circular region."
    },
    "trGetTerrainType": {
        "name": "trGetTerrainType",
        "return_type": "int",
        "params": [
            {
                "name": "center",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "fetches the terrain type ID for the given map position."
    },
    "trGetTerrainSubtype": {
        "name": "trGetTerrainSubtype",
        "return_type": "int",
        "params": [
            {
                "name": "center",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "fetches the terrain subtype ID for the given map position."
    },
    "trTerrainAtPosition": {
        "name": "trTerrainAtPosition",
        "return_type": "bool",
        "params": [
            {
                "name": "subTypeName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "center",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "checks if the terrain at the given map position matches the expected terrain subtype."
    },
    "trGetWaterType": {
        "name": "trGetWaterType",
        "return_type": "int",
        "params": [
            {
                "name": "center",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "fetches the water type ID for the given map position."
    },
    "trWaterAtPosition": {
        "name": "trWaterAtPosition",
        "return_type": "bool",
        "params": [
            {
                "name": "waterName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "center",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "checks if the water at the given map position matches the expected water type."
    },
    "trGetTerrainHeight": {
        "name": "trGetTerrainHeight",
        "return_type": "float",
        "params": [
            {
                "name": "center",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns the terrain height at the given map position."
    },
    "trPlayerSetCiv": {
        "name": "trPlayerSetCiv",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "civName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "replaces the civilization for the given player."
    },
    "trGetNextUnitID": {
        "name": "trGetNextUnitID",
        "return_type": "int",
        "params": [],
        "desc": "returns the ID for the next unit to be allocated."
    },
    "trGetRecentUnits": {
        "name": "trGetRecentUnits",
        "return_type": "int[]",
        "params": [],
        "desc": "returns an array containing recently created units. If auto-resetting is set, returns units created on the last frame."
    },
    "trResetRecentUnits": {
        "name": "trResetRecentUnits",
        "return_type": "void",
        "params": [],
        "desc": "resets list of recently-created units."
    },
    "trSetAutoResetRecentUnits": {
        "name": "trSetAutoResetRecentUnits",
        "return_type": "void",
        "params": [
            {
                "name": "enable",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets whether or not the list of recently-created units should be reset at each frame. Set to true by default."
    },
    "trPlayerSetScore": {
        "name": "trPlayerSetScore",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "score",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "overrides the score for a player by the given value."
    },
    "trPlayerAdjustScore": {
        "name": "trPlayerAdjustScore",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "delta",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "adjust the overridden score value for a player by the given delta."
    },
    "trDisableRule": {
        "name": "trDisableRule",
        "return_type": "void",
        "params": [
            {
                "name": "ruleName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "tells the challenge system this rule was activated."
    },
    "trGetSkyboxVariationID": {
        "name": "trGetSkyboxVariationID",
        "return_type": "int",
        "params": [
            {
                "name": "skyboxName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns the variation ID for the given skybox."
    },
    "trGetCurrentSkyboxUnitID": {
        "name": "trGetCurrentSkyboxUnitID",
        "return_type": "int",
        "params": [],
        "desc": "returns the unit ID for the current skybox, if applicable."
    },
    "trRenderSky": {
        "name": "trRenderSky",
        "return_type": "void",
        "params": [
            {
                "name": "val",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "skyName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "orientation",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "height",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "terrainHeight",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Turn sky rendering on/off and set which sky to use."
    },
    "trEcho": {
        "name": "trEcho",
        "return_type": "void",
        "params": [
            {
                "name": "text",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Trigger echo."
    },
    "trCurrentPlayer": {
        "name": "trCurrentPlayer",
        "return_type": "int",
        "params": [],
        "desc": "returns the current player."
    },
    "trSetCurrentPlayerStatus": {
        "name": "trSetCurrentPlayerStatus",
        "return_type": "void",
        "params": [
            {
                "name": "active",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets the current player as active or inactive."
    },
    "trSetUserControls": {
        "name": "trSetUserControls",
        "return_type": "void",
        "params": [
            {
                "name": "active",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets the player controls on or off."
    },
    "trSetShowCursor": {
        "name": "trSetShowCursor",
        "return_type": "void",
        "params": [
            {
                "name": "show",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "forces the cursor (mouse pointer) to be shown/hidden."
    },
    "trFadeOutMusic": {
        "name": "trFadeOutMusic",
        "return_type": "void",
        "params": [
            {
                "name": "duration",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Fades out current music over a given duration."
    },
    "trPlayNextMusicTrack": {
        "name": "trPlayNextMusicTrack",
        "return_type": "void",
        "params": [],
        "desc": "Plays the next song in the music play list."
    },
    "trFadeOutAllSounds": {
        "name": "trFadeOutAllSounds",
        "return_type": "void",
        "params": [
            {
                "name": "duration",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Fades out all sounds over a given duration."
    },
    "trBlockAllSounds": {
        "name": "trBlockAllSounds",
        "return_type": "void",
        "params": [
            {
                "name": "dialog",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Blocks all sounds from playing from this point forward."
    },
    "trUnblockAllSounds": {
        "name": "trUnblockAllSounds",
        "return_type": "void",
        "params": [],
        "desc": "Unblocks all sounds that were previously blocked from playing."
    },
    "trBlockAllAmbientSounds": {
        "name": "trBlockAllAmbientSounds",
        "return_type": "void",
        "params": [],
        "desc": "blocks all ambient sounds from this point forward"
    },
    "trUnBlockAllAmbientSounds": {
        "name": "trUnBlockAllAmbientSounds",
        "return_type": "void",
        "params": [],
        "desc": "Unblocks all ambient sounds that were previously blocked from playing."
    },
    "trMusicPlay": {
        "name": "trMusicPlay",
        "return_type": "void",
        "params": [
            {
                "name": "filename",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "duration",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Plays the music file."
    },
    "trMusicPlayCurrent": {
        "name": "trMusicPlayCurrent",
        "return_type": "void",
        "params": [],
        "desc": "Plays the current music."
    },
    "trMusicStop": {
        "name": "trMusicStop",
        "return_type": "void",
        "params": [],
        "desc": "Stops the current music."
    },
    "trMusicSetCurrentMusicSet": {
        "name": "trMusicSetCurrentMusicSet",
        "return_type": "void",
        "params": [
            {
                "name": "setID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets the current music set."
    },
    "trMusicSetMood": {
        "name": "trMusicSetMood",
        "return_type": "void",
        "params": [
            {
                "name": "moodID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Changes the music to mood associated with mood id."
    },
    "trMessageSetText": {
        "name": "trMessageSetText",
        "return_type": "void",
        "params": [
            {
                "name": "text",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "timeout",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "displays the message text."
    },
    "trObjectivesTracker": {
        "name": "trObjectivesTracker",
        "return_type": "void",
        "params": [
            {
                "name": "title",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "text",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "soundfile",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "timeout",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "displays the objectives tracker text."
    },
    "trChatSetStatus": {
        "name": "trChatSetStatus",
        "return_type": "void",
        "params": [
            {
                "name": "status",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Changes the chat status."
    },
    "trChatKeepLastMessagesOnScreen": {
        "name": "trChatKeepLastMessagesOnScreen",
        "return_type": "void",
        "params": [
            {
                "name": "status",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets whether the last messages should always remain visible."
    },
    "trChatClearHudMessages": {
        "name": "trChatClearHudMessages",
        "return_type": "void",
        "params": [],
        "desc": "Clears the messages visible on screen."
    },
    "trChatSend": {
        "name": "trChatSend",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "message",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Changes the chat status."
    },
    "trChatSendToPlayer": {
        "name": "trChatSendToPlayer",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "toPlayer",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "message",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Changes the chat status for one specific player."
    },
    "trChatSendSpoofed": {
        "name": "trChatSendSpoofed",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "message",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Changes the chat status, but does not append player."
    },
    "trChatSendSpoofedToPlayer": {
        "name": "trChatSendSpoofedToPlayer",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "toPlayer",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "message",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Changes the chat status, but does not append player. Goes to specific player."
    },
    "trChatHistoryContains": {
        "name": "trChatHistoryContains",
        "return_type": "bool",
        "params": [
            {
                "name": "text",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "player",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Checks whether or not any of the last sent chat messages by a player contain the given text."
    },
    "trGameLoadScenario": {
        "name": "trGameLoadScenario",
        "return_type": "void",
        "params": [
            {
                "name": "scenario",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "start a game using scenario."
    },
    "trCampaignBranchChoice": {
        "name": "trCampaignBranchChoice",
        "return_type": "void",
        "params": [
            {
                "name": "message",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "displayPrompt",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "pop up a dialog allowing choice to load a scenario."
    },
    "trEndChallenge": {
        "name": "trEndChallenge",
        "return_type": "void",
        "params": [
            {
                "name": "bAchievedVictory",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "player completed the challenge. If 'achieved victory' is true, player completed all objectives before the timer elapsed."
    },
    "trCampaignLoseMission": {
        "name": "trCampaignLoseMission",
        "return_type": "void",
        "params": [],
        "desc": "Sets player as defeated within a campaign mission and displays defeat dialog."
    },
    "trCampaignProgress": {
        "name": "trCampaignProgress",
        "return_type": "void",
        "params": [],
        "desc": "Completes current scenario within campaign, and advances to next scenario or cinematic."
    },
    "trCampaignProgressChoice": {
        "name": "trCampaignProgressChoice",
        "return_type": "void",
        "params": [],
        "desc": "Completes current scenario within campaign, and displays prompt to progress to next scenario or return to campaign menu."
    },
    "trTutorialEndChoice": {
        "name": "trTutorialEndChoice",
        "return_type": "void",
        "params": [],
        "desc": "Completes tutorial, and displays prompt to progress to next campaign or return to main menu."
    },
    "trShowWinPopup": {
        "name": "trShowWinPopup",
        "return_type": "void",
        "params": [
            {
                "name": "text",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "soundfile",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "ignoreUserControlsState",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "message and sound."
    },
    "trShowWinLose": {
        "name": "trShowWinLose",
        "return_type": "void",
        "params": [
            {
                "name": "text",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "soundfile",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "ignoreUserControlsState",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "message and sound."
    },
    "trShowLosePopup": {
        "name": "trShowLosePopup",
        "return_type": "void",
        "params": [
            {
                "name": "text",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "soundfile",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "ignoreUserControlsState",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "message and sound."
    },
    "trWorldSpacePromptArmy": {
        "name": "trWorldSpacePromptArmy",
        "return_type": "void",
        "params": [
            {
                "name": "id",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "armyName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "showColor",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "text",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "offset",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "show a world space prompt over a selected army."
    },
    "trWorldSpacePromptArea": {
        "name": "trWorldSpacePromptArea",
        "return_type": "void",
        "params": [
            {
                "name": "id",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "location",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "text",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "offset",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "show a world space prompt in selected location."
    },
    "trWorldSpacePrompt": {
        "name": "trWorldSpacePrompt",
        "return_type": "void",
        "params": [
            {
                "name": "id",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "unitID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "showColor",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "text",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "offset",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "attachPoint",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "show a world space prompt over a selected unit."
    },
    "trWorldSpacePromptHide": {
        "name": "trWorldSpacePromptHide",
        "return_type": "void",
        "params": [
            {
                "name": "id",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "hide a world space prompt."
    },
    "trRenderSnow": {
        "name": "trRenderSnow",
        "return_type": "void",
        "params": [
            {
                "name": "percent",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "controls snow rendering."
    },
    "trRenderRain": {
        "name": "trRenderRain",
        "return_type": "void",
        "params": [
            {
                "name": "percent",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "controls rain rendering."
    },
    "trUIFlashTech": {
        "name": "trUIFlashTech",
        "return_type": "void",
        "params": [
            {
                "name": "techID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "flash",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "flashes the button of a given technology in command panel UI."
    },
    "trUIFlashTrain": {
        "name": "trUIFlashTrain",
        "return_type": "void",
        "params": [
            {
                "name": "protoName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "flash",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "flashes the button of a given protoUnit in command panel UI."
    },
    "trUIFlashCommand": {
        "name": "trUIFlashCommand",
        "return_type": "void",
        "params": [
            {
                "name": "puCmdName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "flash",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "flashes the button of a given protoUnitCommand in command panel UI."
    },
    "trUIFlashGodPowerAtSlot": {
        "name": "trUIFlashGodPowerAtSlot",
        "return_type": "void",
        "params": [
            {
                "name": "slotIdx",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "flash",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "flashes the god power at a given gp slot."
    },
    "trUIMinimapFlash": {
        "name": "trUIMinimapFlash",
        "return_type": "void",
        "params": [
            {
                "name": "flash",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "toggles flashing state on Minimap gadget."
    },
    "trUIIdleBannerFlash": {
        "name": "trUIIdleBannerFlash",
        "return_type": "void",
        "params": [
            {
                "name": "bannerIndex",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "flash",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "toggles flashing state on Minimap gadget."
    },
    "trUIVillagerPriorityButtonFlash": {
        "name": "trUIVillagerPriorityButtonFlash",
        "return_type": "void",
        "params": [
            {
                "name": "buttonIndex",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "flash",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "toggles flashing state on a given Villager Priority Dialog button."
    },
    "trUIVillagerPriorityButtonHUDFlash": {
        "name": "trUIVillagerPriorityButtonHUDFlash",
        "return_type": "void",
        "params": [
            {
                "name": "flash",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "toggles flashing state on HUD Villager Priority Dialog button."
    },
    "trUIPanelVisibility": {
        "name": "trUIPanelVisibility",
        "return_type": "void",
        "params": [
            {
                "name": "panelIndex",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "display",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "toggles visibility for a given HUD panel."
    },
    "trUIGamepadPromptVisibility": {
        "name": "trUIGamepadPromptVisibility",
        "return_type": "void",
        "params": [
            {
                "name": "promptIndex",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "display",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "toggles visibility for a given gamepad prompt."
    },
    "trUIBlockRadialMenu": {
        "name": "trUIBlockRadialMenu",
        "return_type": "void",
        "params": [
            {
                "name": "promptIndex",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "display",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "blocks a given radial menu."
    },
    "trUIPanelFlash": {
        "name": "trUIPanelFlash",
        "return_type": "void",
        "params": [
            {
                "name": "panelIndex",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "flash",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "toggles flashing state for a given HUD panel."
    },
    "trUIGamepadPromptFlash": {
        "name": "trUIGamepadPromptFlash",
        "return_type": "void",
        "params": [
            {
                "name": "promptIndex",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "flash",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "toggles flashing state for a given gamepad prompt."
    },
    "trUIResourceEntryFlash": {
        "name": "trUIResourceEntryFlash",
        "return_type": "void",
        "params": [
            {
                "name": "buttonIndex",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "flash",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "toggles flashing state for a given resource entry in the HUD resoruces panel."
    },
    "trUIFadeToColor": {
        "name": "trUIFadeToColor",
        "return_type": "void",
        "params": [
            {
                "name": "r",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "g",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "b",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "duration",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "delay",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "inout",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "eventID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "fade in/out using color specified."
    },
    "trLeaveGame": {
        "name": "trLeaveGame",
        "return_type": "void",
        "params": [],
        "desc": "Leaves the current game. Most often that means going to the main menu but while in editor playtest it means you go back to the editor."
    },
    "trCampaignStartNew": {
        "name": "trCampaignStartNew",
        "return_type": "void",
        "params": [
            {
                "name": "message",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "campaignPath",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "shows dialog for advancing to the given campaign"
    },
    "trUnforbidProtounit": {
        "name": "trUnforbidProtounit",
        "return_type": "bool",
        "params": [
            {
                "name": "player",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoname",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "removes protounit from the forbidden list"
    },
    "trForbidProtounit": {
        "name": "trForbidProtounit",
        "return_type": "bool",
        "params": [
            {
                "name": "player",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "protoname",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "adds protounit to the forbidden list"
    },
    "trIsDialogueNotPlaying": {
        "name": "trIsDialogueNotPlaying",
        "return_type": "bool",
        "params": [],
        "desc": "returns false if dialogue is currently playing"
    },
    "trUnitChangeName": {
        "name": "trUnitChangeName",
        "return_type": "void",
        "params": [
            {
                "name": "newName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "set an override name for a specific unit"
    },
    "trChatHistoryClear": {
        "name": "trChatHistoryClear",
        "return_type": "void",
        "params": [],
        "desc": "forces the chat history to reset"
    },
    "trEchoStatValue": {
        "name": "trEchoStatValue",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "statTypeID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "fetch a stat value from the KB and echo to chat"
    },
    "trShowChoiceDialog": {
        "name": "trShowChoiceDialog",
        "return_type": "void",
        "params": [
            {
                "name": "maintext",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "text1",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "event1",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "text2",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "event2",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "displays dialog with 2 choices, and activates a trigger in response"
    },
    "trShowChoiceDialogForPlayer": {
        "name": "trShowChoiceDialogForPlayer",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "maintext",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "text1",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "event1",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "text2",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "event2",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "displays dialog with 2 choices for a given player, and activates a trigger in response"
    },
    "trShowImageDialog": {
        "name": "trShowImageDialog",
        "return_type": "void",
        "params": [
            {
                "name": "imagePath",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "message",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "displays a custom image in a dialog, with a subtitle"
    },
    "trOverlayText": {
        "name": "trOverlayText",
        "return_type": "void",
        "params": [
            {
                "name": "rawText",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "time",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "textSize",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "r",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "g",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "b",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "puts up a big movie-credits style text overlay"
    },
    "trShowTextMessage": {
        "name": "trShowTextMessage",
        "return_type": "void",
        "params": [
            {
                "name": "noteTitle",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "noteText",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Displays a text box with the specified title and text."
    },
    "trSetCurrentScenarioUserData": {
        "name": "trSetCurrentScenarioUserData",
        "return_type": "void",
        "params": [
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "value",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "*** NOTE: This function is DEPRECATED *** Sets the current scenario user data."
    },
    "trGetScenarioUserData": {
        "name": "trGetScenarioUserData",
        "return_type": "int",
        "params": [
            {
                "name": "index",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "fallback",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "scenarioName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "*** NOTE: This function is DEPRECATED *** Gets the scenario user data and returns the default value when it is not present yet. Defaults to the current scenario"
    },
    "trUnitForceRandomName": {
        "name": "trUnitForceRandomName",
        "return_type": "void",
        "params": [],
        "desc": "force the selected unit(s) to generate a random name"
    },
    "trUnitGameSelect": {
        "name": "trUnitGameSelect",
        "return_type": "void",
        "params": [
            {
                "name": "clear",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "selects the given units for the current player"
    },
    "trSetFogAndBlackmapMultiplayer": {
        "name": "trSetFogAndBlackmapMultiplayer",
        "return_type": "void",
        "params": [
            {
                "name": "fog",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "black",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "turn fog and black map on/off, affecting all players. (no SP check)"
    },
    "trPlayerSetVictorious": {
        "name": "trPlayerSetVictorious",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "sets the given player as victorious for the current game."
    },
    "trPlayerSetWon": {
        "name": "trPlayerSetWon",
        "return_type": "void",
        "params": [
            {
                "name": "i",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "endGame",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "call this when a player has won on the local machine (meaning that this func must be called synchronously on all machines, it will not pass around a command.)"
    },
    "trSoundPlayDialogue": {
        "name": "trSoundPlayDialogue",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "msgStrID",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "speakerStrID",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "portraitStrID",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "sound",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "eventID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "ignoreOnAbort",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "timeoutMs",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "overrideSoundLength",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Plays the sound associated with the dialogue."
    },
    "trSoundPlayDialogueTalkingHeads": {
        "name": "trSoundPlayDialogueTalkingHeads",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "msgStrID",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "speakerStrID",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "portraitLeftSideStrID",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "portraitRightSideStrID",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "speakerIsLeftSide",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "sound",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "eventID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "ignoreEventOnAbort",
                "type": "bool",
                "required": true,
                "desc": ""
            },
            {
                "name": "eventDelaySeconds",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Plays the sound associated with the dialogue, using the talking heads version of the UI."
    },
    "trSoundsetPlay": {
        "name": "trSoundsetPlay",
        "return_type": "void",
        "params": [
            {
                "name": "soundsetName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Plays the sound associated with the given soundset."
    },
    "trSoundsetPlayPlayer": {
        "name": "trSoundsetPlayPlayer",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "soundsetName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Plays the sound associated with the given soundset for the given player."
    },
    "trActivateCheat": {
        "name": "trActivateCheat",
        "return_type": "bool",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "command",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Executes a cheat for the provided player."
    },
    "trEndGame": {
        "name": "trEndGame",
        "return_type": "void",
        "params": [],
        "desc": "Signal that the game has ended."
    },
    "trRestartScenario": {
        "name": "trRestartScenario",
        "return_type": "void",
        "params": [],
        "desc": "restarts the scenario"
    },
    "trHideScoreboard": {
        "name": "trHideScoreboard",
        "return_type": "void",
        "params": [],
        "desc": "hides the user's Scoreboard."
    },
    "trWPFDialogOpen": {
        "name": "trWPFDialogOpen",
        "return_type": "bool",
        "params": [
            {
                "name": "wpfDialogID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "returns true if the given WPF dialog is currently open."
    },
    "trInGamepadMode": {
        "name": "trInGamepadMode",
        "return_type": "bool",
        "params": [],
        "desc": "returns true if we're currently in gamepad mode."
    },
    "trShowHidePopup": {
        "name": "trShowHidePopup",
        "return_type": "void",
        "params": [
            {
                "name": "type",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "display",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "toggles a popup."
    },
    "xsDisableRule": {
        "name": "xsDisableRule",
        "return_type": "void",
        "params": [
            {
                "name": "ruleName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Disables the given rule."
    },
    "xsDisableSelf": {
        "name": "xsDisableSelf",
        "return_type": "void",
        "params": [],
        "desc": "Disables the current rule."
    },
    "xsEnableRule": {
        "name": "xsEnableRule",
        "return_type": "void",
        "params": [
            {
                "name": "ruleName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Enables the given rule."
    },
    "xsIsRuleEnabled": {
        "name": "xsIsRuleEnabled",
        "return_type": "bool",
        "params": [
            {
                "name": "ruleName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if the rule is enabled."
    },
    "xsSetRulePriority": {
        "name": "xsSetRulePriority",
        "return_type": "void",
        "params": [
            {
                "name": "ruleName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "priority",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the priority of the given rule."
    },
    "xsSetRulePrioritySelf": {
        "name": "xsSetRulePrioritySelf",
        "return_type": "void",
        "params": [
            {
                "name": "priority",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the priority of the current rule."
    },
    "xsSetRuleMinInterval": {
        "name": "xsSetRuleMinInterval",
        "return_type": "void",
        "params": [
            {
                "name": "ruleName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "minInterval",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the min interval of the given rule."
    },
    "xsSetRuleMinIntervalSelf": {
        "name": "xsSetRuleMinIntervalSelf",
        "return_type": "void",
        "params": [
            {
                "name": "minInterval",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the min interval of the current rule."
    },
    "xsSetRuleMaxInterval": {
        "name": "xsSetRuleMaxInterval",
        "return_type": "void",
        "params": [
            {
                "name": "ruleName",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "maxInterval",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the max interval of the given rule."
    },
    "xsSetRuleMaxIntervalSelf": {
        "name": "xsSetRuleMaxIntervalSelf",
        "return_type": "void",
        "params": [
            {
                "name": "maxInterval",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the max interval of the current rule."
    },
    "xsRuleIgnoreIntervalOnce": {
        "name": "xsRuleIgnoreIntervalOnce",
        "return_type": "void",
        "params": [
            {
                "name": "ruleName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Ignores the next interval and updates as soon as possible."
    },
    "xsEnableRuleGroup": {
        "name": "xsEnableRuleGroup",
        "return_type": "void",
        "params": [
            {
                "name": "ruleGroupName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Enables all rule in the given rule group."
    },
    "xsDisableRuleGroup": {
        "name": "xsDisableRuleGroup",
        "return_type": "void",
        "params": [
            {
                "name": "ruleGroupName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Disables all rules in the given rule group."
    },
    "xsIsRuleGroupEnabled": {
        "name": "xsIsRuleGroupEnabled",
        "return_type": "bool",
        "params": [
            {
                "name": "ruleGroupName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if any rule in the group is enabled."
    },
    "xsRuleGroupIgnoreIntervalOnce": {
        "name": "xsRuleGroupIgnoreIntervalOnce",
        "return_type": "void",
        "params": [
            {
                "name": "ruleGroupName",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Ignores the next interval and updates as soon as possible."
    },
    "xsVectorCreate": {
        "name": "xsVectorCreate",
        "return_type": "vector",
        "params": [
            {
                "name": "x",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "y",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "z",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Set the 3 components into a vector, returns the new vector."
    },
    "xsVectorLength": {
        "name": "xsVectorLength",
        "return_type": "float",
        "params": [
            {
                "name": "v",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the length of the given vector."
    },
    "xsVectorNormalize": {
        "name": "xsVectorNormalize",
        "return_type": "vector",
        "params": [
            {
                "name": "v",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns a normalized copy of the given vector."
    },
    "xsVectorDot": {
        "name": "xsVectorDot",
        "return_type": "float",
        "params": [
            {
                "name": "v",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "other",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the dot product of two vectors."
    },
    "xsVectorCross": {
        "name": "xsVectorCross",
        "return_type": "vector",
        "params": [
            {
                "name": "v",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "other",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the cross product of two vectors."
    },
    "xsVectorDistance": {
        "name": "xsVectorDistance",
        "return_type": "float",
        "params": [
            {
                "name": "v",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "other",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the distance between two vectors."
    },
    "xsVectorDistanceSqr": {
        "name": "xsVectorDistanceSqr",
        "return_type": "float",
        "params": [
            {
                "name": "v",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "other",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the squared distance between two vectors."
    },
    "xsVectorDistanceXZ": {
        "name": "xsVectorDistanceXZ",
        "return_type": "float",
        "params": [
            {
                "name": "v",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "other",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the distance between two vectors without considering the Y dimension."
    },
    "xsVectorDistanceXZSqr": {
        "name": "xsVectorDistanceXZSqr",
        "return_type": "float",
        "params": [
            {
                "name": "v",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "other",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the squared distance between two vectors without considering the Y dimension."
    },
    "xsVectorDistanceToLine": {
        "name": "xsVectorDistanceToLine",
        "return_type": "float",
        "params": [
            {
                "name": "v",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "p",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "dir",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the distance between a point and a line defined by a point on the line and a direction."
    },
    "xsVectorDistanceToLineSegment": {
        "name": "xsVectorDistanceToLineSegment",
        "return_type": "float",
        "params": [
            {
                "name": "v",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "p1",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "p2",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the distance between a point and a line defined by two points."
    },
    "xsVectorAngleBetweenVector": {
        "name": "xsVectorAngleBetweenVector",
        "return_type": "float",
        "params": [
            {
                "name": "v",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "other",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the (smaller) angle between two vectors in radians."
    },
    "xsVectorAngleAroundY": {
        "name": "xsVectorAngleAroundY",
        "return_type": "float",
        "params": [
            {
                "name": "v",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "offset",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the angle of a vector around the Y axis in radians. If provided, the offset is used as the center (instead of 0.0/0.0)."
    },
    "xsVectorRotateXZ": {
        "name": "xsVectorRotateXZ",
        "return_type": "vector",
        "params": [
            {
                "name": "v",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "theta",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "offset",
                "type": "vector",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns a rotated copy of the vector on the XZ plane by a given angle. If provided, the offset is used as the center (instead of 0.0/0.0)."
    },
    "xsVectorTranslateXZ": {
        "name": "xsVectorTranslateXZ",
        "return_type": "vector",
        "params": [
            {
                "name": "v",
                "type": "vector",
                "required": true,
                "desc": ""
            },
            {
                "name": "radius",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "theta",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns a translated copy of the vector on the XZ plane by the given radius and angle."
    },
    "xsGetContextPlayer": {
        "name": "xsGetContextPlayer",
        "return_type": "int",
        "params": [],
        "desc": "Returns the current context player ID."
    },
    "xsSetContextPlayer": {
        "name": "xsSetContextPlayer",
        "return_type": "void",
        "params": [
            {
                "name": "playerID",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the current context player ID (DO NOT DO THIS IF YOU DO NOT KNOW WHAT YOU ARE DOING)."
    },
    "xsGetTime": {
        "name": "xsGetTime",
        "return_type": "int",
        "params": [],
        "desc": "Returns the current gametime (in seconds)."
    },
    "xsGetTimeMS": {
        "name": "xsGetTimeMS",
        "return_type": "int",
        "params": [],
        "desc": "Returns the current gametime (in milliseconds)."
    },
    "xsStartTimer": {
        "name": "xsStartTimer",
        "return_type": "void",
        "params": [],
        "desc": "Starts the timer."
    },
    "xsEchoTimerMS": {
        "name": "xsEchoTimerMS",
        "return_type": "void",
        "params": [],
        "desc": "Prints the time in milliseconds that elapsed since the timer was last started."
    },
    "abs": {
        "name": "abs",
        "return_type": "float",
        "params": [
            {
                "name": "_X",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the absolute value of x as a float."
    },
    "round": {
        "name": "round",
        "return_type": "float",
        "params": [
            {
                "name": "_X",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Rounds x to the nearest integer and returns it as a float."
    },
    "min": {
        "name": "min",
        "return_type": "float",
        "params": [
            {
                "name": "_X",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "_Y",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the smaller of the two values as a float."
    },
    "max": {
        "name": "max",
        "return_type": "float",
        "params": [
            {
                "name": "_X",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "_Y",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the larger of the two values as a float."
    },
    "floor": {
        "name": "floor",
        "return_type": "float",
        "params": [
            {
                "name": "_X",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Rounds x down to the next lower integer and returns it as a float."
    },
    "ceil": {
        "name": "ceil",
        "return_type": "float",
        "params": [
            {
                "name": "_X",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Rounds x up to the next higher integer and returns it as a float."
    },
    "sqrt": {
        "name": "sqrt",
        "return_type": "float",
        "params": [
            {
                "name": "_X",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the square root of x."
    },
    "pow": {
        "name": "pow",
        "return_type": "float",
        "params": [
            {
                "name": "_X",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "_Y",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the y-th power of x (x^y)."
    },
    "log": {
        "name": "log",
        "return_type": "float",
        "params": [
            {
                "name": "_X",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the natural logarithm of x."
    },
    "log2": {
        "name": "log2",
        "return_type": "float",
        "params": [
            {
                "name": "_X",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the binary logarithm of x."
    },
    "log10": {
        "name": "log10",
        "return_type": "float",
        "params": [
            {
                "name": "_X",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the common logarithm of x."
    },
    "sin": {
        "name": "sin",
        "return_type": "float",
        "params": [
            {
                "name": "_X",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the sine of x."
    },
    "cos": {
        "name": "cos",
        "return_type": "float",
        "params": [
            {
                "name": "_X",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the cosine of ."
    },
    "tan": {
        "name": "tan",
        "return_type": "float",
        "params": [
            {
                "name": "_X",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the tangent of x."
    },
    "asin": {
        "name": "asin",
        "return_type": "float",
        "params": [
            {
                "name": "_X",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the arcsine of x."
    },
    "acos": {
        "name": "acos",
        "return_type": "float",
        "params": [
            {
                "name": "_X",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the arccosine of x."
    },
    "atan": {
        "name": "atan",
        "return_type": "float",
        "params": [
            {
                "name": "_X",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the arctangent of x."
    },
    "atan2": {
        "name": "atan2",
        "return_type": "float",
        "params": [
            {
                "name": "_Y",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "_X",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the 2-argument arctangent."
    },
    "hypot": {
        "name": "hypot",
        "return_type": "float",
        "params": [
            {
                "name": "_X",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "_Y",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the hypothenuse between x and y (i.e., sqrt(x^2 + y^2))."
    },
    "sgn": {
        "name": "sgn",
        "return_type": "int",
        "params": [
            {
                "name": "x",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the signum of x as an integer (1 if x > 0, -1 if x < 0, or 0 if x == 0)."
    },
    "degToRad": {
        "name": "degToRad",
        "return_type": "float",
        "params": [
            {
                "name": "degrees",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Converts an angle from degrees to radians."
    },
    "radToDeg": {
        "name": "radToDeg",
        "return_type": "float",
        "params": [
            {
                "name": "radians",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Converts an angle from radians to degrees."
    },
    "xsRandSetSeed": {
        "name": "xsRandSetSeed",
        "return_type": "void",
        "params": [
            {
                "name": "seed",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Sets the seed of the random number generator."
    },
    "xsRandGetSeed": {
        "name": "xsRandGetSeed",
        "return_type": "int",
        "params": [],
        "desc": "Gets the current seed of the random number generator."
    },
    "xsRandInt": {
        "name": "xsRandInt",
        "return_type": "int",
        "params": [
            {
                "name": "min",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "max",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns a random integer number in the range (inclusive)."
    },
    "xsRandFloat": {
        "name": "xsRandFloat",
        "return_type": "float",
        "params": [
            {
                "name": "min",
                "type": "float",
                "required": true,
                "desc": ""
            },
            {
                "name": "max",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns a random floating point number in the range (inclusive)."
    },
    "xsRandBool": {
        "name": "xsRandBool",
        "return_type": "bool",
        "params": [
            {
                "name": "chanceTrue",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true with a probability of trueChance in [0.0, 1.0], and false otherwise."
    },
    "xsIntToFloat": {
        "name": "xsIntToFloat",
        "return_type": "float",
        "params": [
            {
                "name": "i",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Casts an int to a float."
    },
    "xsIntToBool": {
        "name": "xsIntToBool",
        "return_type": "bool",
        "params": [
            {
                "name": "i",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Casts an int to a bool (false if == 0, true otherwise)."
    },
    "xsIntToString": {
        "name": "xsIntToString",
        "return_type": "string",
        "params": [
            {
                "name": "i",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Casts an int to a string."
    },
    "xsFloatToInt": {
        "name": "xsFloatToInt",
        "return_type": "int",
        "params": [
            {
                "name": "f",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Casts a float to an int, truncating the fractional part."
    },
    "xsFloatToBool": {
        "name": "xsFloatToBool",
        "return_type": "bool",
        "params": [
            {
                "name": "f",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Casts a float to a bool (false if == 0.0, true otherwise)."
    },
    "xsFloatToString": {
        "name": "xsFloatToString",
        "return_type": "string",
        "params": [
            {
                "name": "f",
                "type": "float",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Casts a float to a string."
    },
    "xsBoolToInt": {
        "name": "xsBoolToInt",
        "return_type": "int",
        "params": [
            {
                "name": "b",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Casts a bool to an int (1 if true, 0 if false)."
    },
    "xsBoolToFloat": {
        "name": "xsBoolToFloat",
        "return_type": "float",
        "params": [
            {
                "name": "b",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Casts a bool to a float (1.0 if true, 0.0 if false)."
    },
    "xsBoolToString": {
        "name": "xsBoolToString",
        "return_type": "string",
        "params": [
            {
                "name": "b",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Casts a bool to a string."
    },
    "xsStringToInt": {
        "name": "xsStringToInt",
        "return_type": "int",
        "params": [
            {
                "name": "s",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Parses an integer from a string(returning 0 on invalid input)."
    },
    "xsStringToFloat": {
        "name": "xsStringToFloat",
        "return_type": "float",
        "params": [
            {
                "name": "s",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Parses a float from a string(returning 0.0 on invalid input)."
    },
    "xsStringToBool": {
        "name": "xsStringToBool",
        "return_type": "bool",
        "params": [
            {
                "name": "s",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Parses a bool from a string(returning false on invalid input)."
    },
    "xsStringLength": {
        "name": "xsStringLength",
        "return_type": "int",
        "params": [
            {
                "name": "s",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the length of a string."
    },
    "xsStringCharAt": {
        "name": "xsStringCharAt",
        "return_type": "string",
        "params": [
            {
                "name": "s",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "idx",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the character at the given index of a string as a string(or an empty string on invalid index)."
    },
    "xsStringFindFirst": {
        "name": "xsStringFindFirst",
        "return_type": "int",
        "params": [
            {
                "name": "first",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "second",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "startIdx",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "caseSensitive",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the index of the first occurrence of a string in another string, searching from the given index. Returns -1 if the substring is not found."
    },
    "xsStringFindLast": {
        "name": "xsStringFindLast",
        "return_type": "int",
        "params": [
            {
                "name": "first",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "second",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "startIdx",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "caseSensitive",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns the index of the last occurrence of a string in another string, searching backwards from the given index. Returns -1 if the substring is not found."
    },
    "xsStringContains": {
        "name": "xsStringContains",
        "return_type": "bool",
        "params": [
            {
                "name": "first",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "second",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "caseSensitive",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if the given substring is present in the string, and false otherwise."
    },
    "xsStringStartsWith": {
        "name": "xsStringStartsWith",
        "return_type": "bool",
        "params": [
            {
                "name": "first",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "second",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "caseSensitive",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if the string starts with the given substring, and false otherwise."
    },
    "xsStringEndsWith": {
        "name": "xsStringEndsWith",
        "return_type": "bool",
        "params": [
            {
                "name": "first",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "second",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "caseSensitive",
                "type": "bool",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns true if the string ends with the given substring, and false otherwise."
    },
    "xsStringSubstring": {
        "name": "xsStringSubstring",
        "return_type": "string",
        "params": [
            {
                "name": "s",
                "type": "string",
                "required": true,
                "desc": ""
            },
            {
                "name": "startIdx",
                "type": "int",
                "required": true,
                "desc": ""
            },
            {
                "name": "endIdx",
                "type": "int",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns a substring in the range of the given indices (inclusive) for a string."
    },
    "xsStringToLower": {
        "name": "xsStringToLower",
        "return_type": "string",
        "params": [
            {
                "name": "s",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns a string in lower case."
    },
    "xsStringToUpper": {
        "name": "xsStringToUpper",
        "return_type": "string",
        "params": [
            {
                "name": "s",
                "type": "string",
                "required": true,
                "desc": ""
            }
        ],
        "desc": "Returns a string in upper case."
    }
}